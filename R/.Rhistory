for(res in res_loc){
#get the metaweb at the current res
metaweb_loc_res = metaweb_loc[sapply(metaweb_loc,function(g) g$res) == res][[1]]
#get the local networks at the current resolution
networks_loc_res = networks_loc[sapply(networks_loc,function(g) g$res) == res]
n = igraph::vcount(do.call(igraph::union,networks_loc_res))
#build abundance matrix
P_mat = matrix(0, nrow = n, ncol = length(networks_loc_res))
rownames(P_mat) = igraph::V(metaweb_loc_res)$name
colnames(P_mat) = names(networks_loc_res)
for(net_loc_name in names(networks_loc_res)){
P_mat[igraph::V(net_loc)$name,net_loc_name] = igraph::V(networks_loc_res[[net_loc_name]])$ab
}
#build link abundance matrix
L_array = array(0, dim=c(n,n,length(networks_loc_res))) #stacked adjacency matrix at a group level
dimnames(L_array)[[1]] = if(n>1)  igraph::V(metaweb_loc_res)$name else list(igraph::V(metaweb_loc_res)$name)
dimnames(L_array)[[2]] = if(n>1)  igraph::V(metaweb_loc_res)$name else list(igraph::V(metaweb_loc_res)$name)
dimnames(L_array)[[3]] = names(networks_loc_res)
for(net_loc_name in dimnames(L_array)[[3]]){
L_array[,,net_loc_name] = (P_mat[,net_loc_name] %*% t(P_mat[,net_loc_name])) *
as.matrix(igraph::get.adjacency(metaweb_loc_res))
}
P_mat_list = c(P_mat_list,list(P_mat))
L_array_list = c(L_array_list,list(L_array))
}
names(P_mat_list) = res_loc
names(L_array_list) = res_loc
return(list(P = P_mat_list, L = L_array_list))
}
# get the local networks
networks = metanetwork[lapply(metanetwork,class) == "igraph"]
metaweb_names = names(metanetwork)[grep('metaweb',x = names(metanetwork))]
networks_loc = networks[!(names(networks) %in% metaweb_names)]
metaweb_loc = networks[names(networks) %in% metaweb_names]
if(length(networks_loc) == 0){
stop("To compute network diversity indices, you must have local networks")
}
res_loc = unique(sapply(networks_loc,function(g) g$res))
diversites_df = matrix(0,nrow = 6 + 2*nrow(metanetwork$abTable),
ncol = length(res_loc))
colnames(diversites_df) = res_loc
#get node and link abundances
P_L_list = metawebParams(metaweb_loc,networks_loc,res_loc)
# get the local networks
networks = metanetwork[lapply(metanetwork,class) == "igraph"]
metaweb_names = names(metanetwork)[grep('metaweb',x = names(metanetwork))]
networks_loc = networks[!(names(networks) %in% metaweb_names)]
metaweb_loc = networks[names(networks) %in% metaweb_names]
if(length(networks_loc) == 0){
stop("To compute network diversity indices, you must have local networks")
}
res_loc = unique(sapply(networks_loc,function(g) g$res))
diversites_df = matrix(0,nrow = 6 + 2*nrow(metanetwork$abTable),
ncol = length(res_loc))
colnames(diversites_df) = res_loc
#get node and link abundances
P_L_list = metawebParams(metaweb_loc,networks_loc,res_loc)
metaweb_loc
networks_loc
res_loc
P_mat_list = list()
L_array_list = list()
## get the L array and P mat for a list of graph
for(res in res_loc){
#get the metaweb at the current res
metaweb_loc_res = metaweb_loc[sapply(metaweb_loc,function(g) g$res) == res][[1]]
#get the local networks at the current resolution
networks_loc_res = networks_loc[sapply(networks_loc,function(g) g$res) == res]
n = igraph::vcount(do.call(igraph::union,networks_loc_res))
#build abundance matrix
P_mat = matrix(0, nrow = n, ncol = length(networks_loc_res))
rownames(P_mat) = igraph::V(metaweb_loc_res)$name
colnames(P_mat) = names(networks_loc_res)
for(net_loc_name in names(networks_loc_res)){
P_mat[igraph::V(net_loc)$name,net_loc_name] = igraph::V(networks_loc_res[[net_loc_name]])$ab
}
#build link abundance matrix
L_array = array(0, dim=c(n,n,length(networks_loc_res))) #stacked adjacency matrix at a group level
dimnames(L_array)[[1]] = if(n>1)  igraph::V(metaweb_loc_res)$name else list(igraph::V(metaweb_loc_res)$name)
dimnames(L_array)[[2]] = if(n>1)  igraph::V(metaweb_loc_res)$name else list(igraph::V(metaweb_loc_res)$name)
dimnames(L_array)[[3]] = names(networks_loc_res)
for(net_loc_name in dimnames(L_array)[[3]]){
L_array[,,net_loc_name] = (P_mat[,net_loc_name] %*% t(P_mat[,net_loc_name])) *
as.matrix(igraph::get.adjacency(metaweb_loc_res))
}
P_mat_list = c(P_mat_list,list(P_mat))
L_array_list = c(L_array_list,list(L_array))
}
res
#get the metaweb at the current res
metaweb_loc_res = metaweb_loc[sapply(metaweb_loc,function(g) g$res) == res][[1]]
#get the local networks at the current resolution
networks_loc_res = networks_loc[sapply(networks_loc,function(g) g$res) == res]
n = igraph::vcount(do.call(igraph::union,networks_loc_res))
#build abundance matrix
P_mat = matrix(0, nrow = n, ncol = length(networks_loc_res))
rownames(P_mat) = igraph::V(metaweb_loc_res)$name
colnames(P_mat) = names(networks_loc_res)
for(net_loc_name in names(networks_loc_res)){
P_mat[igraph::V(net_loc)$name,net_loc_name] = igraph::V(networks_loc_res[[net_loc_name]])$ab
}
#build abundance matrix
P_mat = matrix(0, nrow = n, ncol = length(networks_loc_res))
rownames(P_mat) = igraph::V(metaweb_loc_res)$name
colnames(P_mat) = names(networks_loc_res)
net_loc_name
names(networks_loc_res)
P_mat[igraph::V(net_loc)$name,net_loc_name] = igraph::V(networks_loc_res[[net_loc_name]])$ab
net_loc_name
P_mat
networks_loc_res
networks_loc_res[[net_loc_name]]
net_loc_name
igraph::V(networks_loc_res[[net_loc_name]])$ab
P_mat[igraph::V(net_loc)$name,net_loc_name]
net_loc_name
#function to extract group and link abundances
metawebParams <- function(metaweb_loc,networks_loc,res_loc){
P_mat_list = list()
L_array_list = list()
## get the L array and P mat for a list of graph
for(res in res_loc){
#get the metaweb at the current res
metaweb_loc_res = metaweb_loc[sapply(metaweb_loc,function(g) g$res) == res][[1]]
#get the local networks at the current resolution
networks_loc_res = networks_loc[sapply(networks_loc,function(g) g$res) == res]
n = igraph::vcount(do.call(igraph::union,networks_loc_res))
#build abundance matrix
P_mat = matrix(0, nrow = n, ncol = length(networks_loc_res))
rownames(P_mat) = igraph::V(metaweb_loc_res)$name
colnames(P_mat) = names(networks_loc_res)
for(net_loc_name in names(networks_loc_res)){
P_mat[igraph::V(networks_loc_res[[net_loc_name]])$name,net_loc_name] =
igraph::V(networks_loc_res[[net_loc_name]])$ab
}
#build link abundance matrix
L_array = array(0, dim=c(n,n,length(networks_loc_res))) #stacked adjacency matrix at a group level
dimnames(L_array)[[1]] = if(n>1)  igraph::V(metaweb_loc_res)$name else list(igraph::V(metaweb_loc_res)$name)
dimnames(L_array)[[2]] = if(n>1)  igraph::V(metaweb_loc_res)$name else list(igraph::V(metaweb_loc_res)$name)
dimnames(L_array)[[3]] = names(networks_loc_res)
for(net_loc_name in dimnames(L_array)[[3]]){
L_array[,,net_loc_name] = (P_mat[,net_loc_name] %*% t(P_mat[,net_loc_name])) *
as.matrix(igraph::get.adjacency(metaweb_loc_res))
}
P_mat_list = c(P_mat_list,list(P_mat))
L_array_list = c(L_array_list,list(L_array))
}
names(P_mat_list) = res_loc
names(L_array_list) = res_loc
return(list(P = P_mat_list, L = L_array_list))
}
# get the local networks
networks = metanetwork[lapply(metanetwork,class) == "igraph"]
metaweb_names = names(metanetwork)[grep('metaweb',x = names(metanetwork))]
networks_loc = networks[!(names(networks) %in% metaweb_names)]
metaweb_loc = networks[names(networks) %in% metaweb_names]
if(length(networks_loc) == 0){
stop("To compute network diversity indices, you must have local networks")
}
res_loc = unique(sapply(networks_loc,function(g) g$res))
diversites_df = matrix(0,nrow = 6 + 2*nrow(metanetwork$abTable),
ncol = length(res_loc))
colnames(diversites_df) = res_loc
#get node and link abundances
P_L_list = metawebParams(metaweb_loc,networks_loc,res_loc)
#node diversity at the different resolutions
for(res in res_loc){
abg_P_loc = abgDecompQ(spxp = t(P_L_list$P[[res]]),q = q)
}
abg_P_loc
#node diversity at the different resolutions
for(res in res_loc){
abg_P_loc = abgDecompQ(spxp = t(P_L_list$P[[res]]),q = q)
}
abg_P_loc
rownames(diversites_df)
rownames(metanetwork$abTable)
rownames(diversites_df) = c("connectance","Gamma_P","mean_Alpha_P","Beta_P",paste0("Alpha_",rownames(metanetwork$abTable),"_P"),
"Gamma_L","mean_Alpha_L","Beta_L",paste0("Alpha_",rownames(metanetwork$abTable),"_L"))
diversites_df = matrix(0,nrow = 8 + 2*nrow(metanetwork$abTable),
ncol = length(res_loc))
colnames(diversites_df) = res_loc
rownames(diversites_df) = c("connectance","Gamma_P","mean_Alpha_P","Beta_P",paste0("Alpha_",rownames(metanetwork$abTable),"_P"),
"Gamma_L","mean_Alpha_L","Beta_L",paste0("Alpha_",rownames(metanetwork$abTable),"_L"))
diversites_df = matrix(0,nrow = 7 + 2*nrow(metanetwork$abTable),
ncol = length(res_loc))
colnames(diversites_df) = res_loc
rownames(diversites_df) = c("connectance","Gamma_P","mean_Alpha_P","Beta_P",paste0("Alpha_",rownames(metanetwork$abTable),"_P"),
"Gamma_L","mean_Alpha_L","Beta_L",paste0("Alpha_",rownames(metanetwork$abTable),"_L"))
diversites_df
diversites_df = as.data.frame(diversites_df)
diversites_df = as.data.frame(diversites_df)
#get node and link abundances
P_L_list = metawebParams(metaweb_loc,networks_loc,res_loc)
res
abg_P_loc = abgDecompQ(spxp = t(P_L_list$P[[res]]),q = q)
abg_P_loc$Gamma
diversites_df$Species
abg_P_loc$Gamma
abg_P_loc$mAlpha
abg_P_loc$Alphas
diversites_df[paste0("Alpha_",rownames(metanetwork$abTable),"_P"),res_loc] = abg_P_loc$Alphas
diversites_df
P_L_list$L[[res]]
#link diversity
L_array = P_L_list$L[[res]]
P_L_list$P[[res]]
dim(L_array) = c(n.groups*n.groups,nrow(P_L_list$P[[res]]))
#link diversity
L_array = P_L_list$L[[res]]
dim(L_array) = c(nrow(metaweb.array$P.mat)*nrow(metaweb.array$P.mat),ncol(metaweb.array$P.mat))
dim(L_array) = c(nrow(P_L_list$P.mat)*nrow(P_L_list$P.mat),ncol(P_L_list$P.mat))
dim(L_array)
L_array
as.matrix(L_array)
nrow(P_L_list$P.mat)
P_L_list$P.mat
#get node and link abundances
P_L_list = metawebParams(metaweb_loc,networks_loc,res_loc)
dim(L_array) = c(nrow(P_L_list$P.mat)*nrow(P_L_list$P.mat),ncol(P_L_list$P.mat))
P_L_list
#link diversity
L_array = P_L_list$L[[res]]
dim(L_array) = c(nrow(P_L_list$P.mat[[res]])*nrow(P_L_list$P.mat[[res]]),
ncol(P_L_list$P.mat[[res]]))
nrow(P_L_list$P.mat[[res]])
P_L_list$P.mat[[res]]
res
P_L_list$P.mat
P_L_list[[res]]
P_L_list
P_L_list$P
P_L_list$P[[res]]
#link diversity
L_array = P_L_list$L[[res]]
dim(L_array) = c(nrow(P_L_list$P[[res]])*nrow(P_L_list$P[[res]]),
ncol(P_L_list$P[[res]]))
L_array
P_L_list$L[[res]]
colnames(L_array) = colnames(P_L_list$P[[res]])
abg_L_loc = abgDecompQ(spxp = t(L_array),q = q)
abg_L_loc
#get node and link abundances
P_L_list = metawebParams(metaweb_loc,networks_loc,res_loc)
#node diversity at the different resolutions
for(res in res_loc){
#node diversity
abg_P_loc = abgDecompQ(spxp = t(P_L_list$P[[res]]),q = q)
diversites_df["Gamma_P",res_loc] = abg_P_loc$Gamma
diversites_df["mean_Alpha_P",res_loc] = abg_P_loc$mAlpha
diversites_df["Beta_P",res_loc] = abg_P_loc$Beta
diversites_df[paste0("Alpha_",rownames(metanetwork$abTable),"_P"),res_loc] = abg_P_loc$Alphas
#link diversity
L_array = P_L_list$L[[res]]
dim(L_array) = c(nrow(P_L_list$P[[res]])*nrow(P_L_list$P[[res]]),
ncol(P_L_list$P[[res]]))
colnames(L_array) = colnames(P_L_list$P[[res]])
abg_L_loc = abgDecompQ(spxp = t(L_array),q = q)
diversites_df["Gamma_L",res_loc] = abg_P_loc$Gamma
diversites_df["mean_Alpha_L",res_loc] = abg_P_loc$mAlpha
diversites_df["Beta_L",res_loc] = abg_P_loc$Beta
diversites_df[paste0("Alpha_",rownames(metanetwork$abTable),"_L"),res_loc] = abg_P_loc$Alphas
}
diversites_df
diversites_df = matrix(0,nrow = 6 + 2*nrow(metanetwork$abTable),
ncol = length(res_loc))
colnames(diversites_df) = res_loc
rownames(diversites_df) = c("Gamma_P","mean_Alpha_P","Beta_P",paste0("Alpha_",rownames(metanetwork$abTable),"_P"),
"Gamma_L","mean_Alpha_L","Beta_L",paste0("Alpha_",rownames(metanetwork$abTable),"_L"))
diversites_df = as.data.frame(diversites_df)
#get node and link abundances
P_L_list = metawebParams(metaweb_loc,networks_loc,res_loc)
#node diversity at the different resolutions
for(res in res_loc){
#node diversity
abg_P_loc = abgDecompQ(spxp = t(P_L_list$P[[res]]),q = q)
diversites_df["Gamma_P",res_loc] = abg_P_loc$Gamma
diversites_df["mean_Alpha_P",res_loc] = abg_P_loc$mAlpha
diversites_df["Beta_P",res_loc] = abg_P_loc$Beta
diversites_df[paste0("Alpha_",rownames(metanetwork$abTable),"_P"),res_loc] = abg_P_loc$Alphas
#link diversity
L_array = P_L_list$L[[res]]
dim(L_array) = c(nrow(P_L_list$P[[res]])*nrow(P_L_list$P[[res]]),
ncol(P_L_list$P[[res]]))
colnames(L_array) = colnames(P_L_list$P[[res]])
abg_L_loc = abgDecompQ(spxp = t(L_array),q = q)
diversites_df["Gamma_L",res_loc] = abg_P_loc$Gamma
diversites_df["mean_Alpha_L",res_loc] = abg_P_loc$mAlpha
diversites_df["Beta_L",res_loc] = abg_P_loc$Beta
diversites_df[paste0("Alpha_",rownames(metanetwork$abTable),"_L"),res_loc] = abg_P_loc$Alphas
}
diversites_df
res
compute_diversities <- function(metanetwork,q = 1){
# get the local networks
networks = metanetwork[lapply(metanetwork,class) == "igraph"]
metaweb_names = names(metanetwork)[grep('metaweb',x = names(metanetwork))]
networks_loc = networks[!(names(networks) %in% metaweb_names)]
metaweb_loc = networks[names(networks) %in% metaweb_names]
if(length(networks_loc) == 0){
stop("To compute network diversity indices, you must have local networks")
}
res_loc = unique(sapply(networks_loc,function(g) g$res))
diversites_df = matrix(0,nrow = 6 + 2*nrow(metanetwork$abTable),
ncol = length(res_loc))
colnames(diversites_df) = res_loc
rownames(diversites_df) = c("Gamma_P","mean_Alpha_P","Beta_P",paste0("Alpha_",rownames(metanetwork$abTable),"_P"),
"Gamma_L","mean_Alpha_L","Beta_L",paste0("Alpha_",rownames(metanetwork$abTable),"_L"))
diversites_df = as.data.frame(diversites_df)
#get node and link abundances
P_L_list = metawebParams(metaweb_loc,networks_loc,res_loc)
#node diversity at the different resolutions
for(res in res_loc){
#node diversity
abg_P_loc = abgDecompQ(spxp = t(P_L_list$P[[res]]),q = q)
diversites_df["Gamma_P",res] = abg_P_loc$Gamma
diversites_df["mean_Alpha_P",res] = abg_P_loc$mAlpha
diversites_df["Beta_P",res] = abg_P_loc$Beta
diversites_df[paste0("Alpha_",rownames(metanetwork$abTable),"_P"),res] = abg_P_loc$Alphas
#link diversity
L_array = P_L_list$L[[res]]
dim(L_array) = c(nrow(P_L_list$P[[res]])*nrow(P_L_list$P[[res]]),
ncol(P_L_list$P[[res]]))
colnames(L_array) = colnames(P_L_list$P[[res]])
abg_L_loc = abgDecompQ(spxp = t(L_array),q = q)
diversites_df["Gamma_L",res] = abg_P_loc$Gamma
diversites_df["mean_Alpha_L",res] = abg_P_loc$mAlpha
diversites_df["Beta_L",res] = abg_P_loc$Beta
diversites_df[paste0("Alpha_",rownames(metanetwork$abTable),"_L"),res] = abg_P_loc$Alphas
}
return(diversites_df)
}
diversites_df
library(metanetwork)
# get the local networks
networks = metanetwork[lapply(metanetwork,class) == "igraph"]
metaweb_names = names(metanetwork)[grep('metaweb',x = names(metanetwork))]
networks_loc = networks[!(names(networks) %in% metaweb_names)]
data("meta_angola")
metanetwork = meta_angola
# get the local networks
networks = metanetwork[lapply(metanetwork,class) == "igraph"]
metaweb_names = names(metanetwork)[grep('metaweb',x = names(metanetwork))]
networks_loc = networks[!(names(networks) %in% metaweb_names)]
metaweb_loc = networks[names(networks) %in% metaweb_names]
networks
metaweb_names
metaweb_loc
if(is.null(res)){
res_loc = unique(sapply(networks_loc,function(g) g$res))
}else{
if(!(res %in% colnames(metanetwork$trophicTable))){
stop(paste0("res must be a vector with available resolutions: ",  paste(colnames(metanetwork$trophicTable),collapse = " ")))
}else{
res_loc = res
}
}
metaweb_loc
sapply(metaweb_loc, function(g) g$res)
sapply(metaweb_loc, function(g) g$res) == res
res = "Phylum"
sapply(metaweb_loc, function(g) g$res) == res
metaweb_loc_loc = metaweb_loc[[sapply(metaweb_loc, function(g) g$res) == res]]
smetaweb_loc
metaweb_loc
metaweb_loc_loc = metaweb_loc[[which(sapply(metaweb_loc, function(g) g$res) == res)]]
metaweb_loc_loc
#weighted connectance
igraph::get.adjacency(metaweb_loc_loc)
#weighted connectance
igraph::get.adjacency(metaweb_loc_loc,attr = "weight")
#weighted connectance
igraph::get.adjacency(metaweb_loc_loc,attr = "weight") %>% as.matrix()
V(metaweb_loc_loc)$ab
igraph::V(metaweb_loc_loc)$ab
:V(metaweb_loc_loc)$name
igraph::V(metaweb_loc_loc)$name
get_connectance <- function(g){
g = igraph::get.adjacency(g,attr = "weight") %>% as.matrix()
C = igraph::V(g)$ab %*% metaweb_adj %*% igraph::V(g)$ab
return(g)
}
#weighted connectance
g = metaweb_loc_loc
g = igraph::get.adjacency(g,attr = "weight") %>% as.matrix()
C = igraph::V(g)$ab %*% metaweb_adj %*% igraph::V(g)$ab
g
#weighted connectance
g = metaweb_loc_loc
adj = igraph::get.adjacency(g,attr = "weight") %>% as.matrix()
adj
adj %*% igraph::V(g)$ab
t(igraph::V(g)$ab) %*% adj %*% igraph::V(g)$ab
get_connectance <- function(g){
adj = igraph::get.adjacency(g,attr = "weight") %>% as.matrix()
C = t(igraph::V(g)$ab) %*% adj %*% igraph::V(g)$ab
return(C)
}
nrow(metanetwork$abTable)
metrics_df = matrix(NA,nrow = 1 + nrow(metanetwork$abTable),ncol = 5)
colnames(metrics_df) = c("connectance","mean_TL","max_TL","shortest_path_length","modularity")
metrics_df = as.data.frame(metrics_df)
metrics_df
metrics_df = matrix(NA,nrow = 1 + nrow(metanetwork$abTable),ncol = 5)
colnames(metrics_df) = c("connectance","mean_TL","max_TL","shortest_path_length","modularity")
rownames(metrics_df) = c("metaweb",rownames(metanetwork$abTable))
metrics_df = as.data.frame(metrics_df)
metrics_df
#weighted connectance
get_connectance(metaweb_loc_loc)
#weighted connectance
metrics_df$connectance[1] = get_connectance(metaweb_loc_loc)
metrics_df
igraph::V(metanetwork$metaweb)$TL
library(metanetwork)
data("meta_angola")
compute_diversities(meta_angola,q = 1,ncores = 1)
metanetwork = meta_angola
res = NULL
res
# get the local networks
networks = metanetwork[lapply(metanetwork,class) == "igraph"]
metaweb_names = names(metanetwork)[grep('metaweb',x = names(metanetwork))]
networks_loc = networks[!(names(networks) %in% metaweb_names)]
metaweb_loc = networks[names(networks) %in% metaweb_names]
if(is.null(res)){
res_loc = unique(sapply(networks_loc,function(g) g$res))
}else{
if(!(res %in% colnames(metanetwork$trophicTable))){
stop(paste0("res must be a vector with available resolutions: ",  paste(colnames(metanetwork$trophicTable),collapse = " ")))
}else{
res_loc = res
}
}
if(is.null(igraph::V(metanetwork$metaweb)$TL)){
stop("to use compute_metrics, you need to compute trophic levels first. See compute_TL")
}
get_connectance <- function(g){
adj = igraph::get.adjacency(g,attr = "weight") %>% as.matrix()
C = t(igraph::V(g)$ab) %*% adj %*% igraph::V(g)$ab
return(C)
}
res
res = res_loc[1]
res
metrics_df = matrix(NA,nrow = 1 + nrow(metanetwork$abTable),ncol = 5)
colnames(metrics_df) = c("connectance","mean_TL","max_TL","shortest_path_length","modularity")
rownames(metrics_df) = c("metaweb",rownames(metanetwork$abTable))
metrics_df = as.data.frame(metrics_df)
metaweb_loc_loc = metaweb_loc[[which(sapply(metaweb_loc, function(g) g$res) == res)]]
#metrics for the metaweb
metrics_df$connectance[1] = get_connectance(metaweb_loc_loc)
metrics_df$mean_TL = metaweb_loc_loc
igraph:V(metaweb_loc_loc)$TL
igraph::V(metaweb_loc_loc)$TL
metrics_df$mean_TL = mean(igraph::V(metaweb_loc_loc)$TL)
metrics_df$max_TL = max(igraph::V(metaweb_loc_loc)$TL)
metrics_df$mean_TL
igraph::mean_distance(metaweb_loc_loc)
igraph::mean_distance(metaweb_loc_loc,directed = TRUE)
wtc = cluster_walktrap(metaweb_loc_loc)
wtc = igraph::cluster_walktrap(metaweb_loc_loc)
wtc = igraph::cluster_walktrap(metaweb_loc_loc)
igraph::modularity(wtc)
igraph::modularity(metaweb_loc_loc, membership(wtc))
igraph::modularity(metaweb_loc_loc, igraph::membership(wtc))
metrics_df$modularity[1] = igraph::modularity(metaweb_loc_loc, igraph::membership(wtc))
source("~/Bureau/metanetwork_project/github/metanetwork/R/compute_metrics.R")
get_metrics <- function(g){
C = get_connectance(g)
mean_TL = mean(igraph::V(metaweb_loc_loc)$TL)
max_TL = max(igraph::V(metaweb_loc_loc)$TL)
short_path = igraph::mean_distance(g,directed = TRUE)
mod = get_modularity(g)
return(c(C,mean_TL,max_TL,short_path,mod))
}
#metrics for the metaweb
metrics_metaweb = get_metrics(metaweb_loc_loc)
#get weighted connectance
get_connectance <- function(g){
adj = igraph::get.adjacency(g,attr = "weight") %>% as.matrix()
C = t(igraph::V(g)$ab) %*% adj %*% igraph::V(g)$ab
return(C)
}
get_modularity <- function(g){
wtc = igraph::cluster_walktrap(g)
return(igraph::modularity(g, igraph::membership(wtc)))
}
get_metrics <- function(g){
C = get_connectance(g)
mean_TL = mean(igraph::V(metaweb_loc_loc)$TL)
max_TL = max(igraph::V(metaweb_loc_loc)$TL)
short_path = igraph::mean_distance(g,directed = TRUE)
mod = get_modularity(g)
return(c(C,mean_TL,max_TL,short_path,mod))
}
#metrics for the metaweb
metrics_metaweb = get_metrics(metaweb_loc_loc)
metrics_metaweb
#metrics for the metaweb
metrics_df[1,] = get_metrics(metaweb_loc_loc)
metrics_df
networks_loc
#metrics for local networks
networks_loc_loc = networks_loc[which(sapply(networks_loc, function(g) g$res) == res)]
networks_loc_loc
lapply(networks_loc_loc,get_metrics)
lapply(networks_loc_loc,get_metrics) %>% as.matrix()
lapply(networks_loc_loc,get_metrics) %>% unlist()
do.call(rbind, lapply(networks_loc_loc,get_metrics) )
metrics_df[2:nrow(metrics_df),] = do.call(rbind, lapply(networks_loc_loc,get_metrics) )
metrics_df
