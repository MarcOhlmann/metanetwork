library(igraph)
library(metanetwork)
data("meta_norway")
meta_norway = compute_TL(meta_norway)
meta_norway = append_agg_nets(meta_norway)
meta_norway = compute_TL(meta_norway)
meta_norway = attach_layout(g = meta_norway$metaweb_trophic_class,beta = 0.5,metanetwork = meta_norway)
meta_norway = attach_layout(metanetwork = meta_norway,beta = 0.5,mode ="group-TL-tsne",res = "trophic_class")
meta_norway = attach_layout(metanetwork = meta_norway,beta = 0.5,mode ="group-TL-tsne",res = "tophic_class")
ggmetanet(meta_norway,beta = 0.5,mode = "group-TL-tsne")
ggmetanet(meta_norway,beta = 0.5,mode = "group-TL-tsne",legend = "trophic_class")
ggmetanet(meta_norway,beta = 0.5,legend = "trophic_class")
ggmetanet(meta_norway,beta = 0.5,legend = "trophic_class")
ggmetanet(meta_norway,beta = 0.4,legend = "trophic_class")
ggmetanet(meta_norway,beta = 0.5,legend = "trophic_class")
ggmetanet(g = meta_norway$metaweb_trophic_class,metanetwork = meta_norway,beta = 0.5,legend = "trophic_class")
meta_norway = attach_layout(g = meta_norway$metaweb_trophic_class,beta = 1.5,metanetwork = meta_norway)
ggmetanet(g = meta_norway$metaweb_trophic_class,metanetwork = meta_norway,beta = 1.5,legend = "trophic_class")
beta = 0.2
meta_norway = attach_layout(g = meta_norway$metaweb_trophic_class,beta = beta,metanetwork = meta_norway)
ggmetanet(g = meta_norway$metaweb_trophic_class,metanetwork = meta_norway,beta = beta,legend = "trophic_class")
meta_norway = attach_layout(metanetwork = meta_norway,beta = beta,mode ="group-TL-tsne",res = "tophic_class")
meta_norway = attach_layout(metanetwork = meta_norway,beta = beta,mode ="group-TL-tsne",res = "tophic_class")
meta_norway = attach_layout(metanetwork = meta_norway,beta = beta,mode ="group-TL-tsne",res = "trophic_class")
ggmetanet(meta_norway,beta = beta,mode = "group-TL-tsne",legend = "trophic_class")
group_layout.custom = group_layout.default
group_layout.custom
group_layout.custom$group_height
group_layout.custom$group_width = c(10,5)
group_layout.custom = group_layout.default
group_layout.custom$nbreaks_group = 2
group_layout.custom$group_height = c(10,5)
group_layout.custom$group_width = c(10,5)
meta_norway = attach_layout(metanetwork = meta_norway,beta = beta,mode ="group-TL-tsne",
res = "trophic_class",group_layout.config = group_layout.custom)
ggmetanet(meta_norway,beta = beta,mode = "group-TL-tsne",legend = "trophic_class")
group_layout.custom = group_layout.default
group_layout.custom$nbreaks_group = 2
group_layout.custom$group_height = c(10,7)
group_layout.custom$group_width = c(10,7)
meta_norway = attach_layout(metanetwork = meta_norway,beta = beta,mode ="group-TL-tsne",
res = "trophic_class",group_layout.config = group_layout.custom)
ggmetanet(meta_norway,beta = beta,mode = "group-TL-tsne",legend = "trophic_class")
group_layout.custom$nbreaks_group = 2
group_layout.custom$group_height = c(5,7)
group_layout.custom$group_width = c(5,7)
meta_norway = attach_layout(metanetwork = meta_norway,beta = beta,mode ="group-TL-tsne",
res = "trophic_class",group_layout.config = group_layout.custom)
ggmetanet(meta_norway,beta = beta,mode = "group-TL-tsne",legend = "trophic_class")
library(metanetwork)
library(edgebundle)
library(igraph)
library(ggplot2)
library(ggraph)
g = meta_norway$metaweb
xy = cbind(get.vertex.attribute(g,"group_layout_x_beta0.2"),get.vertex.attribute(g,"group_layout_y_beta0.2"))
xy
fbundle <- edge_bundle_force(g,xy,compatibility_threshold = 0.5,K = 1)
pbundle <- edge_bundle_path(g, xy, max_distortion = 50, weight_fac = 1, segments = 4)
ggplot(pbundle)+
geom_path(aes(x,y),
size = 0.1,show.legend = FALSE,alpha = 0.5)+
geom_point(data=as.data.frame(xy),aes(V1,V2,label = "re"),size=2)+
theme_void()
fbundle <- edge_bundle_force(g,xy,compatibility_threshold = 0.5,K = 1)
pbundle <- edge_bundle_path(g, xy, max_distortion = 50, weight_fac = 1, segments = 50)
ggplot(pbundle)+
geom_path(aes(x,y),
size = 0.1,show.legend = FALSE,alpha = 0.5)+
geom_point(data=as.data.frame(xy),aes(V1,V2,label = "re"),size=2)+
theme_void()
ggplot(fbundle)+
geom_path(aes(x,y),
size = 0.1,show.legend = FALSE,alpha = 0.5)+
geom_point(data=as.data.frame(xy),aes(V1,V2,label = "re"),size=2)+
theme_void()
pbundle <- edge_bundle_path(g, xy, max_distortion = 10, weight_fac = 10, segments = 50)
ggplot(pbundle)+
geom_path(aes(x,y),
size = 0.1,show.legend = FALSE,alpha = 0.5)+
geom_point(data=as.data.frame(xy),aes(V1,V2,label = "re"),size=2)+
theme_void()
pbundle <- edge_bundle_path(g, xy, max_distortion = 50, weight_fac = 50, segments = 100)
ggplot(pbundle)+
geom_path(aes(x,y),
size = 0.1,show.legend = FALSE,alpha = 0.5)+
geom_point(data=as.data.frame(xy),aes(V1,V2,label = "re"),size=2)+
theme_void()
ggmetanet(meta_norway,beta = beta,mode = "group-TL-tsne",legend = "trophic_class")
library(metanetwork)
library(edgebundle)
library(igraph)
library(ggplot2)
library(ggraph)
data("meta_norway")
meta_norway = append_agg_nets(meta_norway)
meta_norway = compute_TL(meta_norway)
beta = 0.2
meta_norway = attach_layout(g = meta_norway$metaweb_trophic_class,beta = beta,metanetwork = meta_norway)
ggmetanet(g = meta_norway$metaweb_trophic_class,metanetwork = meta_norway,beta = beta,legend = "trophic_class")
group_layout.custom = group_layout.default
group_layout.custom$nbreaks_group = 2
group_layout.custom$group_height = c(5,7)
group_layout.custom$group_width = c(5,7)
meta_norway = attach_layout(metanetwork = meta_norway,beta = beta,mode ="group-TL-tsne",
res = "trophic_class",group_layout.config = group_layout.custom)
ggmetanet(meta_norway,beta = beta,mode = "group-TL-tsne",legend = "trophic_class")
diff_plot(g1 = meta_norway$high,g2 = meta_norway$low,
meta_norway,beta = beta,mode = "group-TL-tsne")
data("meta_angola")
library(metanetwork)
data("meta_angola")
data("meta_angola")
metanetwork = meta_angola
res = "all"
ggnet.config = ggnet.default
data("meta_angola")
metanetwork = meta_angola
res = "all"
ggnet.config = ggnet.default
res = colnames(metanetwork$trophicTable)
res
#make res in the same order as trophicTable
res = res[order(match(res,colnames(metanetwork$trophicTable)))]
N_res = length(res)
trophicTable_loc = metanetwork$trophicTable
trophicTable_loc = trophicTable_loc[,res]
expr_loc = 'graph_data_frame = rbind('
for(k in 1:N_res){
if(k == 1){
expr_loc = paste0(expr_loc,
'data.frame(from="origin", to=unique(trophicTable_loc[,',N_res+1-k,'])),')
} else if (k == N_res){
expr_loc = paste0(expr_loc,
'data.frame(from=trophicTable_loc[,',N_res+1-(k-1),
'],to=trophicTable_loc[,',N_res+1-k,']))')
}else{
expr_loc = paste0(expr_loc,
'data.frame(from=metanetwork$trophicTable[,',N_res+1-(k-1),
'],to=metanetwork$trophicTable[,',N_res+1-k,']),')
}
}
eval(parse(text = expr_loc))
graph_data_frame
expr_loc
trophicTable_loc = trophicTable_loc[,res]
trophicTable_loc
graph_data_frame = data.frame(from = "origin", to = unique(trophicTable_loc[,N_res]))
graph_data_frame
k =2
k != N_res
k = 2
k != N_res
graph_data_frame = rbind(graph_data_frame,
data.frame(from = trophicTable_loc[,N_res+1-(k-1)],
to = trophicTable_loc[,N_res+1-k]))
graph_data_frame
res
graph_data_frame = data.frame(from = "origin", to = unique(trophicTable_loc[,N_res]))
for(k in 2:N_res){
graph_data_frame = rbind(graph_data_frame,
data.frame(from = trophicTable_loc[,N_res+1-(k-1)],
to = trophicTable_loc[,N_res+1-k]))
}
graph_data_frame
data("meta_norway")
metanetwork = meta_norway
res = "all"
ggnet.config = ggnet.default
#make res in the same order as trophicTable
res = res[order(match(res,colnames(metanetwork$trophicTable)))]
N_res = length(res)
trophicTable_loc = metanetwork$trophicTable
trophicTable_loc = trophicTable_loc[,res]
res
res = colnames(metanetwork$trophicTable)
#make res in the same order as trophicTable
res = res[order(match(res,colnames(metanetwork$trophicTable)))]
N_res = length(res)
trophicTable_loc = metanetwork$trophicTable
trophicTable_loc = trophicTable_loc[,res]
graph_data_frame = data.frame(from = "origin", to = unique(trophicTable_loc[,N_res]))
for(k in 2:N_res){
graph_data_frame = rbind(graph_data_frame,
data.frame(from = trophicTable_loc[,N_res+1-(k-1)],
to = trophicTable_loc[,N_res+1-k]))
}
graph_data_frame
group_tree = igraph::graph_from_data_frame(graph_data_frame)
color_loc = c("origin",
as.vector(unlist(sapply(res[seq(N_res,1,length.out = N_res)],
function(x) rep(x,length(unique(metanetwork$trophicTable[,x]))))))
)
lay_loc = igraph::layout_as_tree(group_tree,circular = T)
group_tree_Network = intergraph::asNetwork(igraph::simplify(group_tree))
network::network.vertex.names(group_tree_Network) = igraph::V(group_tree)$name
GGally::ggnet2(group_tree_Network,mode = lay_loc, color = color_loc,
label = ggnet.config$label, arrow.size = ggnet.config$arrow.size,
alpha = ggnet.config$alpha, size = ggnet.config$max_size,
label.size = ggnet.config$label.size,palette = ggnet.config$palette,
edge.alpha = ggnet.config$edge.alpha,edge.size = ggnet.config$edge.size,
arrow.gap = ggnet.config$arrow.gap)
knitr::opts_chunk$set(
screenshot.force = FALSE,
echo = TRUE,
rows.print = 5,
message = FALSE,
warning = FALSE)
library(metanetwork)
library(metanetwork)
library(igraph)
```{r}
data(meta_angola)
print(meta_angola)
ggnet.custom = ggnet.default
plot_trophicTable(meta_angola,ggnet.config = ggnet.custom)
meta_angola = append_agg_nets(meta_angola)
print(meta_angola)
meta_angola = compute_TL(meta_angola)
ggmetanet(g = meta_angola$metaweb_Phylum,beta = 1,metanetwork = meta_angola)
ggmetanet(g = meta_angola$metaweb,beta = 0.04,legend = 'Phylum',metanetwork = meta_angola)
diff_plot(g1 = meta_angola$X1986,g2 = meta_angola$X2003,beta = 0.04,metanetwork = meta_angola)
#attaching a layout to the metaweb
meta_angola = attach_layout(metanetwork = meta_angola,beta = 0.05)
#layout is saved as node attribute (only one component since the other one is trophic level)
V(meta_angola$metaweb)$TL
V(meta_angola$metaweb)$layout_beta0.05_1
V(meta_angola$metaweb)$layout_beta0.05
#ggmetanet uses computed layout
ggmetanet(meta_angola,beta = 0.05,legend = "Phylum")
#attaching a new layout for the same beta value
meta_angola = attach_layout(metanetwork = meta_angola,beta = 0.05)
#ggmetanet with the new 'TL-tsne-run
ggmetanet(meta_angola,beta = 0.05,legend = "Phylum",nrep_ly = 2)
#using metaweb layout to represent a local network
ggmetanet(g = meta_angola$X1986,metanetwork = meta_angola,
legend = "Phylum",layout_metaweb = T,beta = 0.05)
#using metaweb layout for diffplot
diff_plot(g1 = meta_angola$X1986,g2 = meta_angola$X2003,
metanetwork = meta_angola,beta = 0.05,
layout_metaweb = T)
source("~/Desktop/metanetwork_project/github/metanetwork/vignettes/precompile.R")
getwd()
?split
library(metanetwork)
data("meta_angola")
g = meta_angola$metaweb
## groups[i] for V(g)[i]
if(is.null(groups)){# each node forms its own group if groups is NULL
groups <- igraph::V(g)$name
names(groups) <- igraph::V(g)$name
}
alpha.vec <- igraph::V(g)$ab #abundance of the groups of the groups
names(alpha.vec) <- igraph::V(g)$name
t(as.matrix(sapply(split(alpha.vec,groups),sum)))
groups <- igraph::V(g)$name
names(groups) <- igraph::V(g)$name
groups
alpha.vec <- igraph::V(g)$ab #abundance of the groups of the groups
names(alpha.vec) <- igraph::V(g)$name
t(as.matrix(sapply(split(alpha.vec,groups),sum)))
t(as.matrix(Matrix.utils::aggregate.Matrix(alpha.vec,groups,fun = 'sum')))
library(igraph)
g = make_ring(10)
build_metanet(g)
g = make_ring(10,directed = T)
test_that("warnings when metaweb node names are absent",  {
## No names for metaweb (igraph)
expect_warning(build_metanet(g))
})
library(usethis)
test_that("warnings when metaweb node names are absent",  {
## No names for metaweb (igraph)
expect_warning(build_metanet(g))
})
library(testthat)
test_that("warnings when metaweb node names are absent",  {
## No names for metaweb (igraph)
expect_warning(build_metanet(g))
})
metaweb
get.adjacency(g)
A = as.matrix(get.adjacency(g))
test_that("warnings when metaweb node names are absent",  {
## No names for metaweb (igraph)
expect_warning(build_metanet(g))
## No names for metaweb (Matrix)
expect_warning(build_metanet(A))
})
expect_warning(build_metanet(A))
build_metanet(A)
expect_warning(build_metanet(A))
test_that("warnings when metaweb node names are absent",  {
## No names for metaweb (igraph)
expect_warning(build_metanet(g))
## No names for metaweb (Matrix)
expect_warning(build_metanet(A))
})
test_that("warnings when metaweb node names are absent",  {
## No names for metaweb (igraph)
expect_warning(build_metanet(g))
## No names for metaweb (Matrix)
expect_warning(build_metanet(A))
})
test_that("warnings when metaweb node names are absent",  {
## No names for metaweb (igraph)
expect_warning(build_metanet(g))
## No names for metaweb (Matrix)
expect_warning(build_metanet(A))
})
g_u = make_ring(10)
g_d = erdos.renyi.game(10,3,type = "gnm",)
plot(g_d)
g_d = erdos.renyi.game(10,9,type = "gnm",)
plot(g_d)
g_d = erdos.renyi.game(10,9,type = "gnm",)
plot(g_d)
g_d = erdos.renyi.game(10,9,type = "gnm",)
plot(g_d)
g_d = erdos.renyi.game(10,9,type = "gnm",)
plot(g_d)
g_d = erdos.renyi.game(10,9,type = "gnm",)
plot(g_d)
g_d = erdos.renyi.game(10,9,type = "gnm",)
plot(g_d)
g_d = erdos.renyi.game(10,9,type = "gnm",)
plot(g_d)
g_d = erdos.renyi.game(10,9,type = "gnm",)
plot(g_d)
g_d = erdos.renyi.game(10,9,type = "gnm",)
plot(g_d)
g_d = erdos.renyi.game(10,5,type = "gnm",)
plot(g_d)
g_d = erdos.renyi.game(10,5,type = "gnm",)
plot(g_d)
g_d = erdos.renyi.game(10,8,type = "gnm",)
plot(g_d)
g_d = erdos.renyi.game(10,8,type = "gnm",directed = T)
plot(g_d)
g_d = erdos.renyi.game(10,8,type = "gnm",directed = T)
plot(g_d)
g_d = erdos.renyi.game(10,8,type = "gnm",directed = T)
plot(g_d)
g_d = erdos.renyi.game(10,8,type = "gnm",directed = T)
plot(g_d)
g_d = erdos.renyi.game(10,8,type = "gnm",directed = T)
plot(g_d)
g_d = erdos.renyi.game(10,8,type = "gnm",directed = T)
plot(g_d)
test_that("error when metaweb is not connected or directed",{
expect_error(build_metanet(g_u))
expect_error(build_metanet(g_d))
})
test_that("property of the metaweb",  {
## No names for metaweb (igraph)
expect_warning(build_metanet(g))
## No names for metaweb (Matrix)
expect_warning(build_metanet(A))
#metaweb must be directed
expect_error(build_metanet(g_u))
#metaweb must be connected
expect_error(build_metanet(g_d))
})
build_metanet(g_u)
test_that("property of the metaweb",  {
## No names for metaweb (igraph)
expect_warning(build_metanet(g))
## No names for metaweb (Matrix)
expect_warning(build_metanet(A))
#metaweb must be directed
expect_warning(build_metanet(g_u))
expect_error(build_metanet(g_u))
#metaweb must be connected
expect_error(build_metanet(g_d))
})
test_that("property of the metaweb",  {
## No names for metaweb (igraph)
expect_warning(build_metanet(g))
## No names for metaweb (Matrix)
expect_warning(build_metanet(A))
#metaweb must be directed
expect_warning(build_metanet(g_u))
expect_error(build_metanet(g_u))
#metaweb must be connected
expect_warning(build_metanet(g_d))
expect_error(build_metanet(g_d))
})
test_that("property of the metaweb",  {
## No names for metaweb (igraph)
expect_warning(build_metanet(g))
## No names for metaweb (Matrix)
expect_warning(build_metanet(A))
#metaweb must be directed
expect_error(build_metanet(g_u))
#metaweb must be connected
expect_error(build_metanet(g_d))
})
#igraph example
n = 10
g = make_ring(n,directed = T)
A = as.matrix(get.adjacency(g))
g_u = make_ring(n)
V(g_u)$name = as.character(1:n)
g_d = erdos.renyi.game(n,n-2,type = "gnm",directed = T)
V(g_d)$name = as.character(1:n)
test_that("property of the metaweb",  {
## No names for metaweb (igraph)
expect_warning(build_metanet(g))
## No names for metaweb (Matrix)
expect_warning(build_metanet(A))
#metaweb must be directed
expect_error(build_metanet(g_u))
#metaweb must be connected
expect_error(build_metanet(g_d))
})
colnames(abTable)
data("meta_angola")
library(igraph)
metaweb = meta_angola$metaweb
abTable = meta_angola$abTable
trophicTable = meta_angola$trophicTable
colnames(abTable)
expect_error(build_metanet(metaweb,abTable_r,trophicTable))
test_that("correspondance of node names",{
abTable_r = abTable
colnames(abTable)[1] = "aa"
trophicTable_r = trophicTable_r
expect_error(build_metanet(metaweb,abTable_r,trophicTable))
expect_error(build_metanet(metaweb,abTable,trophicTable_r))
expect_error(build_metanet(metaweb,abTable_r,trophicTable_r))
})
colnames(trophicTable_r)[1]
colnames(trophicTable_r)[1]
trophicTable_r = trophicTable
colnames(trophicTable_r)[1]
test_that("correspondance of node names between metaweb, abTable and trophic table",{
abTable_r = abTable
colnames(abTable)[1] = "aa"
trophicTable_r = trophicTable
colnames(trophicTable_r)[1]
expect_error(build_metanet(metaweb,abTable_r,trophicTable))
expect_error(build_metanet(metaweb,abTable,trophicTable_r))
expect_error(build_metanet(metaweb,abTable_r,trophicTable_r))
})
build_metanet(metaweb,abTable_r,trophicTable)
abTable
abTable_r = abTable
abTable_r = abTable
colnames(abTable_r)[1] = "aa"
trophicTable_r = trophicTable
colnames(trophicTable_r)[1]
expect_error(build_metanet(metaweb,abTable_r,trophicTable))
expect_error(build_metanet(metaweb,abTable,trophicTable_r))
expect_error(build_metanet(metaweb,abTable_r,trophicTable_r))
trophicTable
abTable_r = abTable
colnames(abTable_r)[1] = "aa"
trophicTable_r = trophicTable
rownames(trophicTable_r)[1] = "aa"
expect_error(build_metanet(metaweb,abTable_r,trophicTable))
expect_error(build_metanet(metaweb,abTable,trophicTable_r))
expect_error(build_metanet(metaweb,abTable_r,trophicTable_r))
metaweb,abTable,trophicTable_r)
build_metanet(metaweb,abTable,trophicTable_r)
expect_error(build_metanet(metaweb,abTable,trophicTable_r))
trophicTable_r
test_that("correspondance of node names between metaweb, abTable and trophic table",{
abTable_r = abTable
colnames(abTable_r)[1] = "aa"
trophicTable_r = trophicTable
rownames(trophicTable_r)[1,1] = "aa"
expect_error(build_metanet(metaweb,abTable_r,trophicTable))
expect_error(build_metanet(metaweb,abTable,trophicTable_r))
expect_error(build_metanet(metaweb,abTable_r,trophicTable_r))
})
abTable_r = abTable
colnames(abTable_r)[1] = "aa"
trophicTable_r = trophicTable
rownames(trophicTable_r)[1,1] = "aa"
trophicTable_r[1,1] = "aa"
expect_error(build_metanet(metaweb,abTable_r,trophicTable))
expect_error(build_metanet(metaweb,abTable,trophicTable_r))
expect_error(build_metanet(metaweb,abTable_r,trophicTable_r))
test_that("correspondance of node names between metaweb, abTable and trophic table",{
abTable_r = abTable
colnames(abTable_r)[1] = "aa"
trophicTable_r = trophicTable
trophicTable_r[1,1] = "aa"
expect_error(build_metanet(metaweb,abTable_r,trophicTable))
expect_error(build_metanet(metaweb,abTable,trophicTable_r))
expect_error(build_metanet(metaweb,abTable_r,trophicTable_r))
})
get_local_networks(meta_angola)
library(metanetwork)
data(meta_angola)
get_local_networks(meta_angola)
extract_networks(meta_angola)
class(extract_networks(meta_angola))
length(extract_networks(meta_angola))
meta_angola
build_metanet(metaweb,abTable)
metaweb = meta_angola$metaweb
abTable = meta_angola$abTable
# test on the number of local networks
expect_is(length(extract_networks(meta_angola)),6)
# test on the number of local networks
expect_is(length(extract_networks(meta_angola)),6)
expect_is(length(extract_networks(build_metanet(metaweb,abTable))),2)
length(extract_networks(build_metanet(metaweb,abTable)))
length(extract_networks(meta_angola)),6
length(extract_networks(meta_angola)),6)
extract_networks(meta_angola)
