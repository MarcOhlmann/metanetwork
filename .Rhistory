library(pkgdown)
install.packages("pkgdown")
library(knitr)
knit("vertebrates.Rmd.orig",output =  "vertebrates.Rmd")
library(metanetwork)
library(edgebundle)
library(igraph)
library(ggplot2)
library(ggraph)
data("meta_norway")
meta_norway = append_agg_nets(meta_norway)
meta_norway = compute_TL(meta_norway)
beta = 0.2
meta_norway = attach_layout(g = meta_norway$metaweb_trophic_class,beta = beta,metanetwork = meta_norway)
ggmetanet(g = meta_norway$metaweb_trophic_class,metanetwork = meta_norway,beta = beta,legend = "trophic_class")
group_layout.custom = group_layout.default
group_layout.custom$nbreaks_group = 2
group_layout.custom$group_height = c(5,7)
group_layout.custom$group_width = c(5,7)
meta_norway = attach_layout(metanetwork = meta_norway,beta = beta,mode ="group-TL-tsne",
res = "trophic_class",group_layout.config = group_layout.custom)
ggmetanet(meta_norway,beta = beta,mode = "group-TL-tsne",legend = "trophic_class")
diff_plot(g1 = meta_norway$high,g2 = meta_norway$low,
meta_norway,beta = beta,mode = "group-TL-tsne")
meta_norway$metaweb
g1 = meta_norway$high
g2 = meta_norway$low
meta_norway
beta = beta
mode = "group-TL-tsne"
g1 = meta_norway$high
g2 = meta_norway$low
metanetwork = meta_norway
beta = beta
mode = "group-TL-tsne"
vis_tool = "ggnet"
edge_thrs = NULL
layout_metaweb = T
flip_coords = F
alpha_per_group = NULL
alpha_per_node = NULL
TL_tsne.config = TL_tsne.default
nrep_ly = 1
ggnet.config = ggnet.default
visNetwork.config = visNetwork.default
if(!is.metanetwork(metanetwork)){
stop("metanetwork is an object of class metanetwork, see build_metanet")
}
message(paste0("mode is ",mode))
if(!(mode %in% c('TL-tsne','group-TL-tsne','TL-kpco','fr','kk','circle'))){
stop("mode must be one of: \n
'TL-tsne','TL-kpco','fr','kk','circle")
}
networks = extract_networks(metanetwork)
if(!(prod(c(g1$name,g2$name) %in% sapply(networks,function(g) g$name)))){
stop('g1 and g2 must belongs to metanetwork')
} else{
#special case : uniform abundance (binary data)
if(length(unique(igraph::V(g1)$ab)) == 1 && length(unique(igraph::V(g2)$ab)) == 1){
igraph::V(g1)$ab = 1
igraph::V(g2)$ab = 1
}
g_union = igraph::union(g1,g2)
#test if g_union is conneted
if(!(igraph::is.connected(g_union)) && !(layout_metaweb)){
stop("the union network is not connected, you must use layout_metaweb=T to represent it (you then also have to compute layout for
the metaweb using attach_layout)")
}
g_union = igraph::permute(g_union,order(order(igraph::V(g_union)$name)))
#ab of gUnion: V(g1)$ab - V(g2)$ab if the node is present in both networks
# -10 if node is absent
igraph::V(g_union)$ab_1[is.na(igraph::V(g_union)$ab_1)] = -10
igraph::V(g_union)$ab_2[is.na(igraph::V(g_union)$ab_2)] = -10
igraph::V(g_union)$ab = igraph::V(g_union)$ab_1 - igraph::V(g_union)$ab_2
#weights of gUnion: E(g1)$weight - E(g2)$weight if the edge is present in both networks
# -10 if edge is absent
igraph::E(g_union)$weight_1[is.na(igraph::E(g_union)$weight_1)] = -10
igraph::E(g_union)$weight_2[is.na(igraph::E(g_union)$weight_2)] = -10
igraph::E(g_union)$weight_col = igraph::E(g_union)$weight_1 - igraph::E(g_union)$weight_2
igraph::E(g_union)$weight_col_bis = igraph::E(g_union)$weight_col
#when weights are equal, E(g_union)$weight_col == 0,
#setting this value to weight in g1 (or g2) for representaiton purpose
igraph::E(g_union)$weight_col_bis = ifelse(igraph::E(g_union)$weight_col_bis == 0,
igraph::E(g_union)$weight_1,
igraph::E(g_union)$weight_col)
#when edge is absent from g2 or g1, setting weight_col_bis to value in g1 or g2
igraph::E(g_union)$weight_col_bis = ifelse(igraph::E(g_union)$weight_col_bis > 5,
igraph::E(g_union)$weight_1,
igraph::E(g_union)$weight_col_bis)
igraph::E(g_union)$weight_col_bis = ifelse(igraph::E(g_union)$weight_col_bis < -5,
igraph::E(g_union)$weight_2,
igraph::E(g_union)$weight_col_bis)
if(is.null(metanetwork$trophicTable)){
metanetwork_diff = build_metanet(g_union)
}else{
if(g_union$res_1 == colnames(metanetwork$trophicTable)[1]){
#append trophicTable to g_union, keep only focal nodes
metanetwork_diff = build_metanet(metaweb = g_union,
trophicTable = metanetwork$trophicTable[
igraph::V(g_union)$name,])
}else{
metanetwork_diff = build_metanet(g_union)
}
}
#associate layout of the metaweb to metanetwork if layout_metaweb = T
if(layout_metaweb){
#get the attributes of the metaweb at the resolution of the networks
if(is.null(metanetwork$metaweb$res)){
ind_metaweb = which(sapply(networks,function(g) g$name) == "metaweb")
current_metaweb = networks[[ind_metaweb]]
}else{
ind_metaweb = intersect(which(sapply(networks,function(g) g$res) == g1$res),
which(sapply(networks,function(g) g$name) == "metaweb"))
current_metaweb = networks[[ind_metaweb]]
}
attr_names = igraph::vertex_attr_names(current_metaweb)
if(length(grep(paste0("beta",beta),attr_names)) == 0){
stop("to use 'layout_metaweb = T', you need to attach a layout to the metaweb
for the desired beta value and resolution, see attach_layout function")
} else{
#set trophic levels as metaweb trophic levels
metaweb_TL = igraph::V(current_metaweb)$TL
names(metaweb_TL) = igraph::V(current_metaweb)$name
igraph::V(metanetwork_diff$metaweb)$TL =
metaweb_TL[igraph::V(metanetwork_diff$metaweb)$name]
layout_loc = igraph::get.vertex.attribute(graph = current_metaweb,
name = paste0("layout_beta",beta))
names(layout_loc) = V(current_metaweb)$name
metanetwork_diff$metaweb =
igraph::set_vertex_attr(graph = metanetwork_diff$metaweb,
name = paste0("layout_beta",beta),
value = layout_loc[V(metanetwork_diff$metaweb)$name])
}
} else{
#compute trophic level of the difference network if layout_metaweb = F
igraph::V(metanetwork_diff$metaweb)$TL = compute_TL_diff(metanetwork_diff,metanetwork)
}
if(is.null(g1$res)){
message(paste0('plotting: ',g1$name,' - ',g2$name))
}else{message(paste0('plotting: ',g1$name,'_',g1$res,' - ',g2$name,'_',g2$res))}
#choice of visualisation tool
if(vis_tool == "ggnet"){
return(ggmetanet(metanetwork = metanetwork_diff,mode = mode,diff_plot_bool = T,
ggnet.config = ggnet.config,TL_tsne.config = TL_tsne.config,
beta = beta,edge_thrs = edge_thrs,layout_metaweb,flip_coords = flip_coords,
alpha_per_node = alpha_per_node,alpha_per_group = alpha_per_group))
}else if(vis_tool == "visNetwork"){
return(vismetaNetwork(metanetwork = metanetwork_diff,mode = mode,diff_plot_bool = T,
visNetwork.config = visNetwork.config,TL_tsne.config = TL_tsne.config,
beta = beta,edge_thrs = edge_thrs,layout_metaweb = layout_metaweb,flip_coords = flip_coords))
}
}
g_union = igraph::union(g1,g2)
g_union
g_union = igraph::union(g1,g2)
#test if g_union is conneted
if(!(igraph::is.connected(g_union)) && !(layout_metaweb)){
stop("the union network is not connected, you must use layout_metaweb=T to represent it (you then also have to compute layout for
the metaweb using attach_layout)")
}
g_union = igraph::permute(g_union,order(order(igraph::V(g_union)$name)))
#ab of gUnion: V(g1)$ab - V(g2)$ab if the node is present in both networks
# -10 if node is absent
igraph::V(g_union)$ab_1[is.na(igraph::V(g_union)$ab_1)] = -10
igraph::V(g_union)$ab_2[is.na(igraph::V(g_union)$ab_2)] = -10
igraph::V(g_union)$ab = igraph::V(g_union)$ab_1 - igraph::V(g_union)$ab_2
#weights of gUnion: E(g1)$weight - E(g2)$weight if the edge is present in both networks
# -10 if edge is absent
igraph::E(g_union)$weight_1[is.na(igraph::E(g_union)$weight_1)] = -10
igraph::E(g_union)$weight_2[is.na(igraph::E(g_union)$weight_2)] = -10
igraph::E(g_union)$weight_col = igraph::E(g_union)$weight_1 - igraph::E(g_union)$weight_2
igraph::E(g_union)$weight_col_bis = igraph::E(g_union)$weight_col
#when weights are equal, E(g_union)$weight_col == 0,
#setting this value to weight in g1 (or g2) for representaiton purpose
igraph::E(g_union)$weight_col_bis = ifelse(igraph::E(g_union)$weight_col_bis == 0,
igraph::E(g_union)$weight_1,
igraph::E(g_union)$weight_col)
#when edge is absent from g2 or g1, setting weight_col_bis to value in g1 or g2
igraph::E(g_union)$weight_col_bis = ifelse(igraph::E(g_union)$weight_col_bis > 5,
igraph::E(g_union)$weight_1,
igraph::E(g_union)$weight_col_bis)
igraph::E(g_union)$weight_col_bis = ifelse(igraph::E(g_union)$weight_col_bis < -5,
igraph::E(g_union)$weight_2,
igraph::E(g_union)$weight_col_bis)
if(is.null(metanetwork$trophicTable)){
metanetwork_diff = build_metanet(g_union)
}else{
if(g_union$res_1 == colnames(metanetwork$trophicTable)[1]){
#append trophicTable to g_union, keep only focal nodes
metanetwork_diff = build_metanet(metaweb = g_union,
trophicTable = metanetwork$trophicTable[
igraph::V(g_union)$name,])
}else{
metanetwork_diff = build_metanet(g_union)
}
}
is.null(metanetwork$trophicTable)
if(g_union$res_1 == colnames(metanetwork$trophicTable)[1]){
#append trophicTable to g_union, keep only focal nodes
metanetwork_diff = build_metanet(metaweb = g_union,
trophicTable = metanetwork$trophicTable[
igraph::V(g_union)$name,])
}else{
metanetwork_diff = build_metanet(g_union)
}
metanetwork_diff
metanetwork_diff$metaweb
meta_norway = attach_layout(metanetwork = meta_norway,beta = beta,mode ="group-TL-tsne",
res = "trophic_class",group_layout.config = group_layout.custom)
group_layout.custom = group_layout.default
group_layout.custom$nbreaks_group = 2
group_layout.custom$group_height = c(5,7)
group_layout.custom$group_width = c(5,7)
meta_norway = attach_layout(metanetwork = meta_norway,beta = beta,mode ="group-TL-tsne",
meta_norway = attach_layout(metanetwork = meta_norway,beta = beta,mode ="group-TL-tsne",
res = "trophic_class",group_layout.config = group_layout.custom)
)
meta_norway = attach_layout(metanetwork = meta_norway,beta = beta,mode ="group-TL-tsne",
res = "trophic_class",group_layout.config = group_layout.custom)
ggmetanet(meta_norway,beta = beta,mode = "group-TL-tsne",legend = "trophic_class")
meta_norway$metaweb
g1 = meta_norway$high
g2 = meta_norway$low
metanetwork = meta_norway
beta = beta
mode = "group-TL-tsne"
vis_tool = "ggnet"
edge_thrs = NULL
layout_metaweb = T
flip_coords = F
alpha_per_group = NULL
alpha_per_node = NULL
TL_tsne.config = TL_tsne.default
nrep_ly = 1
ggnet.config = ggnet.default
visNetwork.config = visNetwork.default
if(!is.metanetwork(metanetwork)){
stop("metanetwork is an object of class metanetwork, see build_metanet")
}
message(paste0("mode is ",mode))
if(!(mode %in% c('TL-tsne','group-TL-tsne','TL-kpco','fr','kk','circle'))){
stop("mode must be one of: \n
'TL-tsne','TL-kpco','fr','kk','circle")
}
networks = extract_networks(metanetwork)
if(!(prod(c(g1$name,g2$name) %in% sapply(networks,function(g) g$name)))){
stop('g1 and g2 must belongs to metanetwork')
} else{
#special case : uniform abundance (binary data)
if(length(unique(igraph::V(g1)$ab)) == 1 && length(unique(igraph::V(g2)$ab)) == 1){
igraph::V(g1)$ab = 1
igraph::V(g2)$ab = 1
}
g_union = igraph::union(g1,g2)
#test if g_union is conneted
if(!(igraph::is.connected(g_union)) && !(layout_metaweb)){
stop("the union network is not connected, you must use layout_metaweb=T to represent it (you then also have to compute layout for
the metaweb using attach_layout)")
}
g_union = igraph::permute(g_union,order(order(igraph::V(g_union)$name)))
#ab of gUnion: V(g1)$ab - V(g2)$ab if the node is present in both networks
# -10 if node is absent
igraph::V(g_union)$ab_1[is.na(igraph::V(g_union)$ab_1)] = -10
igraph::V(g_union)$ab_2[is.na(igraph::V(g_union)$ab_2)] = -10
igraph::V(g_union)$ab = igraph::V(g_union)$ab_1 - igraph::V(g_union)$ab_2
#weights of gUnion: E(g1)$weight - E(g2)$weight if the edge is present in both networks
# -10 if edge is absent
igraph::E(g_union)$weight_1[is.na(igraph::E(g_union)$weight_1)] = -10
igraph::E(g_union)$weight_2[is.na(igraph::E(g_union)$weight_2)] = -10
igraph::E(g_union)$weight_col = igraph::E(g_union)$weight_1 - igraph::E(g_union)$weight_2
igraph::E(g_union)$weight_col_bis = igraph::E(g_union)$weight_col
#when weights are equal, E(g_union)$weight_col == 0,
#setting this value to weight in g1 (or g2) for representaiton purpose
igraph::E(g_union)$weight_col_bis = ifelse(igraph::E(g_union)$weight_col_bis == 0,
igraph::E(g_union)$weight_1,
igraph::E(g_union)$weight_col)
#when edge is absent from g2 or g1, setting weight_col_bis to value in g1 or g2
igraph::E(g_union)$weight_col_bis = ifelse(igraph::E(g_union)$weight_col_bis > 5,
igraph::E(g_union)$weight_1,
igraph::E(g_union)$weight_col_bis)
igraph::E(g_union)$weight_col_bis = ifelse(igraph::E(g_union)$weight_col_bis < -5,
igraph::E(g_union)$weight_2,
igraph::E(g_union)$weight_col_bis)
if(is.null(metanetwork$trophicTable)){
metanetwork_diff = build_metanet(g_union)
}else{
if(g_union$res_1 == colnames(metanetwork$trophicTable)[1]){
#append trophicTable to g_union, keep only focal nodes
metanetwork_diff = build_metanet(metaweb = g_union,
trophicTable = metanetwork$trophicTable[
igraph::V(g_union)$name,])
}else{
metanetwork_diff = build_metanet(g_union)
}
}
#associate layout of the metaweb to metanetwork if layout_metaweb = T
if(layout_metaweb){
#get the attributes of the metaweb at the resolution of the networks
if(is.null(metanetwork$metaweb$res)){
ind_metaweb = which(sapply(networks,function(g) g$name) == "metaweb")
current_metaweb = networks[[ind_metaweb]]
}else{
ind_metaweb = intersect(which(sapply(networks,function(g) g$res) == g1$res),
which(sapply(networks,function(g) g$name) == "metaweb"))
current_metaweb = networks[[ind_metaweb]]
}
attr_names = igraph::vertex_attr_names(current_metaweb)
if(length(grep(paste0("beta",beta),attr_names)) == 0){
stop("to use 'layout_metaweb = T', you need to attach a layout to the metaweb
for the desired beta value and resolution, see attach_layout function")
} else{
#set trophic levels as metaweb trophic levels
metaweb_TL = igraph::V(current_metaweb)$TL
names(metaweb_TL) = igraph::V(current_metaweb)$name
igraph::V(metanetwork_diff$metaweb)$TL =
metaweb_TL[igraph::V(metanetwork_diff$metaweb)$name]
layout_loc = igraph::get.vertex.attribute(graph = current_metaweb,
name = paste0("layout_beta",beta))
names(layout_loc) = V(current_metaweb)$name
metanetwork_diff$metaweb =
igraph::set_vertex_attr(graph = metanetwork_diff$metaweb,
name = paste0("layout_beta",beta),
value = layout_loc[V(metanetwork_diff$metaweb)$name])
}
} else{
#compute trophic level of the difference network if layout_metaweb = F
igraph::V(metanetwork_diff$metaweb)$TL = compute_TL_diff(metanetwork_diff,metanetwork)
}
if(is.null(g1$res)){
message(paste0('plotting: ',g1$name,' - ',g2$name))
}else{message(paste0('plotting: ',g1$name,'_',g1$res,' - ',g2$name,'_',g2$res))}
#choice of visualisation tool
if(vis_tool == "ggnet"){
return(ggmetanet(metanetwork = metanetwork_diff,mode = mode,diff_plot_bool = T,
ggnet.config = ggnet.config,TL_tsne.config = TL_tsne.config,
beta = beta,edge_thrs = edge_thrs,layout_metaweb,flip_coords = flip_coords,
alpha_per_node = alpha_per_node,alpha_per_group = alpha_per_group))
}else if(vis_tool == "visNetwork"){
return(vismetaNetwork(metanetwork = metanetwork_diff,mode = mode,diff_plot_bool = T,
visNetwork.config = visNetwork.config,TL_tsne.config = TL_tsne.config,
beta = beta,edge_thrs = edge_thrs,layout_metaweb = layout_metaweb,flip_coords = flip_coords))
}
}
#special case : uniform abundance (binary data)
if(length(unique(igraph::V(g1)$ab)) == 1 && length(unique(igraph::V(g2)$ab)) == 1){
igraph::V(g1)$ab = 1
igraph::V(g2)$ab = 1
}
g_union = igraph::union(g1,g2)
#test if g_union is conneted
if(!(igraph::is.connected(g_union)) && !(layout_metaweb)){
stop("the union network is not connected, you must use layout_metaweb=T to represent it (you then also have to compute layout for
the metaweb using attach_layout)")
}
g_union = igraph::permute(g_union,order(order(igraph::V(g_union)$name)))
#ab of gUnion: V(g1)$ab - V(g2)$ab if the node is present in both networks
# -10 if node is absent
igraph::V(g_union)$ab_1[is.na(igraph::V(g_union)$ab_1)] = -10
igraph::V(g_union)$ab_2[is.na(igraph::V(g_union)$ab_2)] = -10
igraph::V(g_union)$ab = igraph::V(g_union)$ab_1 - igraph::V(g_union)$ab_2
#weights of gUnion: E(g1)$weight - E(g2)$weight if the edge is present in both networks
# -10 if edge is absent
igraph::E(g_union)$weight_1[is.na(igraph::E(g_union)$weight_1)] = -10
igraph::E(g_union)$weight_2[is.na(igraph::E(g_union)$weight_2)] = -10
igraph::E(g_union)$weight_col = igraph::E(g_union)$weight_1 - igraph::E(g_union)$weight_2
igraph::E(g_union)$weight_col_bis = igraph::E(g_union)$weight_col
#when weights are equal, E(g_union)$weight_col == 0,
#setting this value to weight in g1 (or g2) for representaiton purpose
igraph::E(g_union)$weight_col_bis = ifelse(igraph::E(g_union)$weight_col_bis == 0,
igraph::E(g_union)$weight_1,
igraph::E(g_union)$weight_col)
#when edge is absent from g2 or g1, setting weight_col_bis to value in g1 or g2
igraph::E(g_union)$weight_col_bis = ifelse(igraph::E(g_union)$weight_col_bis > 5,
igraph::E(g_union)$weight_1,
igraph::E(g_union)$weight_col_bis)
igraph::E(g_union)$weight_col_bis = ifelse(igraph::E(g_union)$weight_col_bis < -5,
igraph::E(g_union)$weight_2,
igraph::E(g_union)$weight_col_bis)
g_union$res_1 == colnames(metanetwork$trophicTable)[1]
#append trophicTable to g_union, keep only focal nodes
metanetwork_diff = build_metanet(metaweb = g_union,
trophicTable = metanetwork$trophicTable[
igraph::V(g_union)$name,])
g_union
layout_metaweb
is.null(metanetwork$metaweb$res)
ind_metaweb = intersect(which(sapply(networks,function(g) g$res) == g1$res),
which(sapply(networks,function(g) g$name) == "metaweb"))
current_metaweb = networks[[ind_metaweb]]
current_metaweb
attr_names = igraph::vertex_attr_names(current_metaweb)
length(grep(paste0("beta",beta),attr_names)) == 0
attr_names
#set trophic levels as metaweb trophic levels
metaweb_TL = igraph::V(current_metaweb)$TL
metaweb_TL
names(metaweb_TL) = igraph::V(current_metaweb)$name
igraph::V(metanetwork_diff$metaweb)$TL =
metaweb_TL[igraph::V(metanetwork_diff$metaweb)$name]
layout_loc = igraph::get.vertex.attribute(graph = current_metaweb,
name = paste0("layout_beta",beta))
names(layout_loc) = V(current_metaweb)$name
igraph::V(metanetwork_diff$metaweb)$TL =
metaweb_TL[igraph::V(metanetwork_diff$metaweb)$name]
layout_loc = igraph::get.vertex.attribute(graph = current_metaweb,
name = paste0("layout_beta",beta))
metanetwork_diff$metaweb
current_metaweb
layout_loc_x = graph::get.vertex.attribute(graph = current_metaweb,
name = paste0("group_layout_x_beta",beta))
layout_loc_x = igraph::get.vertex.attribute(graph = current_metaweb,
name = paste0("group_layout_x_beta",beta))
layout_loc_y = igraph::get.vertex.attribute(graph = current_metaweb,
name = paste0("group_layout_y_beta",beta))
layout_loc_x
layout_loc_y
sapply(c("x","y"),function(k) igraph::get.vertex.attribute(graph = current_metaweb,
name = paste0("group_layout_",k,"_beta",beta)))
layout_loc = sapply(c("x","y"),
function(k) igraph::get.vertex.attribute(graph = current_metaweb,
name = paste0("group_layout_",k,"_beta",beta)))
layout_loc
layout_loc
rownames(layout_loc) = V(current_metaweb)$name
current_metaweb
layou_loc
layout_loc
layout_loc = sapply(c("x","y"),
function(k) igraph::get.vertex.attribute(graph = current_metaweb,
name = paste0("group_layout_",k,"_beta",beta)))
rownames(layout_loc) = V(current_metaweb)$name
metanetwork_diff$metaweb =
igraph::set_vertex_attr(graph = metanetwork_diff$metaweb,
name = paste0("group_layout_x_beta",beta),
value = layout_loc[V(metanetwork_diff$metaweb)$name,"x"]) %>%
igraph::set_vertex_attr(graph = metanetwork_diff$metaweb,
name = paste0("group_layout_y_beta",beta),
value = layout_loc[V(metanetwork_diff$metaweb)$name,"y"])
metanetwork_diff$metaweb =
igraph::set_vertex_attr(graph = metanetwork_diff$metaweb,
name = paste0("group_layout_x_beta",beta),
value = layout_loc[V(metanetwork_diff$metaweb)$name,"x"])
metanetwork_diff$metaweb =   igraph::set_vertex_attr(graph = metanetwork_diff$metaweb,
name = paste0("group_layout_y_beta",beta),
value = layout_loc[V(metanetwork_diff$metaweb)$name,"y"])
metanetwork_diff$metaweb =
igraph::set_vertex_attr(graph = metanetwork_diff$metaweb,
name = paste0("group_layout_x_beta",beta),
value = layout_loc[V(metanetwork_diff$metaweb)$name,"x"])
metanetwork_diff$metaweb =
igraph::set_vertex_attr(graph = metanetwork_diff$metaweb,
name = paste0("group_layout_y_beta",beta),
value = layout_loc[V(metanetwork_diff$metaweb)$name,"y"])
metanetwork_diff$metaweb =
igraph::set_vertex_attr(graph = metanetwork_diff$metaweb,
name = c("tt",paste0("group_layout_x_beta",beta)),
value = layout_loc[V(metanetwork_diff$metaweb)$name,"x"])
metanetwork_diff$metaweb =
igraph::set_vertex_attr(graph = metanetwork_diff$metaweb,
name = paste0("group_layout_x_beta",beta)
value = layout_loc[V(metanetwork_diff$metaweb)$name,"x"])
metanetwork_diff$metaweb =
igraph::set_vertex_attr(graph = metanetwork_diff$metaweb,
name = paste0("group_layout_y_beta",beta),
value = layout_loc[V(metanetwork_diff$metaweb)$name,"y"])
metanetwork_diff$metaweb =
igraph::set_vertex_attr(graph = metanetwork_diff$metaweb,
name = paste0("group_layout_x_beta",beta),
value = layout_loc[V(metanetwork_diff$metaweb)$name,"x"])
metanetwork_diff$metaweb =
igraph::set_vertex_attr(graph = metanetwork_diff$metaweb,
name = paste0("group_layout_y_beta",beta),
value = layout_loc[V(metanetwork_diff$metaweb)$name,"y"])
metanetwork_diff$metaweb
metanetwork_diff
source("~/Desktop/metanetwork_project/github/metanetwork/vignettes/precompile.R")
