library(metanetwork)
knitr::opts_chunk$set(
screenshot.force = FALSE,
echo = TRUE,
rows.print = 5,
message = FALSE,
warning = FALSE)
meta0 = attach_layout(meta0,beta = 0.1)
library(igraph)
library(network)
library(intergraph)
library(GGally)
n = 5
#generate a lattice
g = igraph::make_lattice(dim = 2,length = n,directed = T)
#deleting nodes and edges
nodes_to_rm = c()
for (k in 1:(n-1)){
nodes_to_rm = c(nodes_to_rm,((k-1)*n+1):(k*n - k))
}
g = delete_vertices(g,nodes_to_rm)
g = delete_edges(g,c("7|12","8|13","9|14","2|5"))
V(g)$name = LETTERS[1:vcount(g)]
#representing the lattice using ggnet package
network = asNetwork(g)
ggnet2(network, arrow.size = 7,size = 3 ,arrow.gap = 0.025, label = T)
library(igraph)
library(metanetwork)
meta0 = attach_layout(meta0,beta = 0.1)
#building metanetwork object
meta0 = build_metanet(metaweb = g,abTable = presence)
#building metanetwork object
meta0 = build_metanet(metaweb = g,abTable = presence)
#sampling a presence table
presence = rbind(c(1,1,1,1,1,1,0,0,1,0,0,0,0,0,1),
c(0,0,0,1,1,1,1,1,1,1,1,1,1,1,1))
rownames(presence) = c('a','b')
colnames(presence) = V(g)$name
#building metanetwork object
meta0 = build_metanet(metaweb = g,abTable = presence)
class(g)
class(meta0)
meta0 = attach_layout(meta0,beta = 0.1)
V(meta0$metaweb)$TL
#compute trophic levels for metaweb and local networks
meta0 = compute_TL(meta0)
V(meta0$metaweb)$name
V(meta0$metaweb)$TL
meta0 = attach_layout(meta0,beta = 0.1)
V(meta0$metaweb)$layoutbeta_0.1
meta0$metaweb
V(meta0$metaweb)$layout_beta0.1
ggmetanet(meta0,beta = 0.1)
ggmetanet(meta0,beta = 0.1)
ggmetanet(meta0,beta = 0.1)
ggmetanet(meta0,beta = 0.1)
ggmetanet(meta0,beta = 0.1)
object.size(rep(1,1000))
object.size(rep(1L,1000))
object.size(rep(T,1000))
object.size(rep(0L,1000))
object.size(rep(1,1000))
object.size(rep(1L,1000))
ggmetanet(meta0,beta = 0.1,layout_metaweb = T)
#diffplot
diff_plot(meta0,meta0$a,meta0$b,beta = 0.1)
#ggmetanet
ggmetanet(meta0,beta = 0.1,layout_metaweb = T)
#diffplot
diff_plot(meta0,meta0$a,meta0$b,beta = 0.1,layout_metaweb = T)
