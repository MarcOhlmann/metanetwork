[{"path":"https://marcohlmann.github.io/metanetwork/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marc Ohlmann. Maintainer.","code":""},{"path":"https://marcohlmann.github.io/metanetwork/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ohlmann M (????). metanetwork: Handling representing trophic networks space time. R package version 0.0.0, https://CRAN.R-project.org/package=metanetwork.","code":"@Manual{,   title = {metanetwork: Handling and representing trophic networks in space and time},   author = {Marc Ohlmann},   note = {R package version 0.0.0},   url = {https://CRAN.R-project.org/package=metanetwork}, }"},{"path":"https://marcohlmann.github.io/metanetwork/index.html","id":"r-package-metanetwork","dir":"","previous_headings":"","what":"Handling and representing trophic networks in space and time","title":"Handling and representing trophic networks in space and time","text":"Marc Ohlmann 22/6/2021","code":""},{"path":"https://marcohlmann.github.io/metanetwork/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Handling and representing trophic networks in space and time","text":"Description: collection tools represent analyse trophic networks space accross aggregation levels. package contains layout algorithm specifically designed trophic networks, using dimension reduction diffusion kernel trophic levels R.","code":""},{"path":"https://marcohlmann.github.io/metanetwork/index.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"Handling and representing trophic networks in space and time","text":"metanetwork depends : igraph Matrix Matrix.utils ggplot2 dplyr GGally network ade4 intergraph sna visNetwork","code":""},{"path":"https://marcohlmann.github.io/metanetwork/index.html","id":"package-installation","dir":"","previous_headings":"","what":"Package installation","title":"Handling and representing trophic networks in space and time","text":"Download package gitlab page Install source using devtools","code":""},{"path":"https://marcohlmann.github.io/metanetwork/index.html","id":"loading-the-package","dir":"","previous_headings":"","what":"Loading the package","title":"Handling and representing trophic networks in space and time","text":"Loading ‘igraph’ also strongly recommended","code":"library(metanetwork)"},{"path":"https://marcohlmann.github.io/metanetwork/index.html","id":"what-is-a-metanetwork-","dir":"","previous_headings":"","what":"What is a metanetwork ?","title":"Handling and representing trophic networks in space and time","text":"ecological networks literature, metanetwork refers set networks space. R package ‘metanetwork’, stick widespread (however restrictive) case: potential interaction network (metaweb, can built using expert knowledge) local abundance tables, local networks induced subgraph metaweb local abundances Additional information might considered (used ‘metanetwork’) : trophic table indicating hierarchy nodes metaweb, order study metanetwork different aggregation levels qualitative covariable table, order average local networks value covariable","code":""},{"path":[]},{"path":[]},{"path":"https://marcohlmann.github.io/metanetwork/index.html","id":"generating-the-metaweb-an-representing-it-using-ggnet2","dir":"","previous_headings":"Generating pyramid data set","what":"Generating the metaweb an representing it using ‘ggnet2’","title":"Handling and representing trophic networks in space and time","text":"first generate pyramid network using ‘igraph’ represent using ‘ggnet2’  Notice ‘ggnet2’ default layout algorithm (Fruchterman-Reingold algorithm, force directed algorithm) non-reproducible non-oriented: x-axis y-axis interpretation","code":"library(igraph) library(network) library(intergraph) library(GGally)  n = 5 #generate a lattice  g = igraph::make_lattice(dim = 2,length = n,directed = T) #deleting nodes and edges nodes_to_rm = c() for (k in 1:(n-1)){   nodes_to_rm = c(nodes_to_rm,((k-1)*n+1):(k*n - k)) } g = delete_vertices(g,nodes_to_rm) g = delete_edges(g,c(\"7|12\",\"8|13\",\"9|14\",\"2|5\")) V(g)$name = LETTERS[1:vcount(g)] #representing the lattice using ggnet package network = asNetwork(g) ggnet2(network, arrow.size = 7,size = 3 ,arrow.gap = 0.025, label = T) ggnet2(network, arrow.size = 7,size = 3 ,arrow.gap = 0.025, label = T)"},{"path":"https://marcohlmann.github.io/metanetwork/index.html","id":"generating-abundance-table","dir":"","previous_headings":"Generating pyramid data set","what":"Generating abundance table","title":"Handling and representing trophic networks in space and time","text":"now generate two local communities (presence/absence case)","code":"#sampling a presence table presence = rbind(c(1,1,1,1,1,1,0,0,1,0,0,0,0,0,1),                  c(0,0,0,1,1,1,1,1,1,1,1,1,1,1,1))  rownames(presence) = c('a','b') colnames(presence) = V(g)$name"},{"path":"https://marcohlmann.github.io/metanetwork/index.html","id":"building-a-metanetwork-object","dir":"","previous_headings":"","what":"Building a metanetwork object","title":"Handling and representing trophic networks in space and time","text":"lattice metaweb abundance table, build S3 object class ‘metanetwork’ using build_metanetwork method print prints summary considered metanetwork.","code":"#building metanetwork object meta0 = build_metanetwork(metaweb = g,abTable = presence) class(g) ## [1] \"igraph\" class(meta0) ## [1] \"metanetwork\" print(meta0) ## object of class metanetwork  ## metaweb has 15 nodes and 16 edges  ## 2 local networks  ## single resolution available"},{"path":[]},{"path":"https://marcohlmann.github.io/metanetwork/index.html","id":"the-class-metanetwork","dir":"","previous_headings":"Handling metanetworks","what":"the class ‘metanetwork’","title":"Handling and representing trophic networks in space and time","text":"metanetwork object consists list ‘igraph’ objects: metaweb, metaweb used build metanetwork, ‘igraph’ object node attribute $ab indicating local relative abundance node graph attribute $nameindicating \"metaweb\" local networks, list ‘igraph’ objects node attribute $ab indicating local relative abundance node network graph attribute $name indicating local network names, rownames abundance table. metaweb node relative abundances mean local relative abundances","code":"meta0$b$name ## [1] \"b\" meta0$metaweb$name ## [1] \"metaweb\" #abundances table(V(meta0$b)$ab) ##  ## 0.0833333333333333  ##                 12 table(V(meta0$metaweb)$ab) ##  ## 0.05  0.1  ##   10    5"},{"path":"https://marcohlmann.github.io/metanetwork/index.html","id":"computing-trophic-levels","dir":"","previous_headings":"Handling metanetworks","what":"computing trophic levels","title":"Handling and representing trophic networks in space and time","text":"metanetwork package enables 2D network representation x-axis equals trophic levels. compute trophic levels, metanetwork implements method describe : MacKay, R. S., S. Johnson, B. Sansom. “directed directed network?.” Royal Society open science 7.9 (2020): 201138. get solution dimension 1 (higher dimension), metaweb needs connected. Metanetwork package assumes metaweb connected. method compute_trophic_levels allows compute trophic levels metanetwork objects. trophic levels computed, node networks considered metanetwork node attribute $TL","code":"#compute trophic levels for metaweb and local networks meta0 = compute_trophic_levels(meta0) #trophic levels V(meta0$metaweb)$name ##  [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" V(meta0$metaweb)$TL ##  [1] 0.000000e+00 0.000000e+00 1.000000e+00 4.440892e-16 1.000000e+00 ##  [6] 2.000000e+00 4.440892e-16 1.000000e+00 2.000000e+00 3.000000e+00 ## [11] 0.000000e+00 1.000000e+00 2.000000e+00 3.000000e+00 4.000000e+00"},{"path":"https://marcohlmann.github.io/metanetwork/index.html","id":"representing-metanetworks","dir":"","previous_headings":"","what":"Representing metanetworks","title":"Handling and representing trophic networks in space and time","text":"Two layout methods specifically designed trophic networks implemented metanetwork. methods, x-axis trophic level. Y-axis computed reducing diffusion graph kernel, measuring similarity nodes. linear method kernel based PCO constrained trophic level (using package ‘ade4’). metanetwork, called \"TL-kpco\". non linear modification t-sne algorithm. modified algorithm implemented metanetwork package, high dimension similarity matrix diffusion kernel. t-sne optimisation process runs constraining first axis (x-axis) equal trophic level. metanetwork, called \"TL-tsne\".","code":""},{"path":"https://marcohlmann.github.io/metanetwork/index.html","id":"diffusion-graph-kernel","dir":"","previous_headings":"Representing metanetworks","what":"Diffusion graph kernel","title":"Handling and representing trophic networks in space and time","text":"Diffusion kernel similarity matrix nodes according diffusion process. Let  directed network,  adjacency matrix. note: . laplacian matrix defined : diffusion kernel defined (Kondor & Lafferty, 2002):  positive parameter. Diffusion kernel measures similarity pairs nodes taking account paths arbitrary length. restrict direct neighbors.","code":""},{"path":"https://marcohlmann.github.io/metanetwork/index.html","id":"beta-parameter","dir":"","previous_headings":"Representing metanetworks","what":"beta parameter","title":"Handling and representing trophic networks in space and time","text":"single parameter diffusion kernel. controls weight given different paths diffusion kernel. also analogous diffusion constant physics. ’ll see examples importance shaping networks.","code":""},{"path":"https://marcohlmann.github.io/metanetwork/index.html","id":"ggmetanet-function","dir":"","previous_headings":"Representing metanetworks","what":"ggmetanet function","title":"Handling and representing trophic networks in space and time","text":"main metanetwork representation function ggmetanet. allows representing metaweb local networks using ggnet layout algorithms. Default mode \"TL-tsne\". ggmetanet plots metaweb current metanetwork default.   ggmetanet can also represent local networks (specific layout)  Increasing beta squeeze y-axis  Moreover, clusters nodes belonging different ‘branches’. become similar beta increased. Representing disconnected networks metaweb needs connected, local networks can disconnected due sampling effects. case, trophic levels computed using metaweb trophic levels. basal species connected module trophic level equals value metaweb.","code":"#ggmetanet# ggmetanet(metanetwork = meta0,beta = 0.1) #ggmetanet# ggmetanet(metanetwork = meta0,beta = 0.45) ggmetanet(g = meta0$b,beta = 0.1,metanetwork = meta0) ggmetanet(g = meta0$b,beta = 1,metanetwork = meta0) ggmetanet(g = meta0$a,beta = 0.45,metanetwork = meta0)"},{"path":"https://marcohlmann.github.io/metanetwork/index.html","id":"diff_plot-function","dir":"","previous_headings":"Representing metanetworks","what":"diff_plot function","title":"Handling and representing trophic networks in space and time","text":"order compare local networks, diff_plot function implemented. colors nodes according presence/absence variation abundance networks.","code":"diff_plot(g1 = meta0$a,g2 = meta0$b,beta = 0.1,mode = 'TL-tsne',metanetwork = meta0)"},{"path":"https://marcohlmann.github.io/metanetwork/index.html","id":"changing-ggnet-configuration-parameters","dir":"","previous_headings":"","what":"Changing ggnet configuration parameters","title":"Handling and representing trophic networks in space and time","text":"order fine tune network plots, possible modify ggnet parameters metanetwork. object ggnet.default stored wraps different visualisation parameters. Change modify plot. # Angola data set example using real data accessible metanetwork. consists Angoala coastal trophic network Angelini, R. & Vaz-Velho, F. (2011)., abundance data different time steps (1986 2003) trophic table, indicating groups species belong.","code":"ggnet.custom = ggnet.default ggnet.custom$edge.size = 3*ggnet.default$edge.size ggnet.custom$label.size = 7 ggmetanet(beta = 0.1,metanetwork = meta0,           ggnet.config = ggnet.custom)"},{"path":"https://marcohlmann.github.io/metanetwork/index.html","id":"angola-metanetwork-object","dir":"","previous_headings":"","what":"angola metanetwork object","title":"Handling and representing trophic networks in space and time","text":"angola dataset lazy loaded metanetwork. meta_angola consists object class metanetwork.","code":"print(meta_angola) ## object of class metanetwork  ## metaweb has 28 nodes and 127 edges  ## 2 local networks  ## available resolutions are: Species Phylum"},{"path":"https://marcohlmann.github.io/metanetwork/index.html","id":"plot_trophic_table-function","dir":"","previous_headings":"","what":"plot_trophic_table function","title":"Handling and representing trophic networks in space and time","text":"Contrary pyramid example, angola dataset trophic table, describing nodes memberships higher relevant groups. angola dataset, two different taxonomic resolutions available. Networks can handled represented Species Phylum level. plot_trophic_table function allows representing tree describing species memberships.","code":"ggnet.custom = ggnet.default ggnet.custom$label.size = 2 plot_trophicTable(meta_angola,ggnet.config = ggnet.custom)"},{"path":"https://marcohlmann.github.io/metanetwork/index.html","id":"append_aggregated_network-method","dir":"","previous_headings":"","what":"append_aggregated_network method","title":"Handling and representing trophic networks in space and time","text":"method append_aggregated_network allows computing appending aggregated networks (different available resolutions) current metanetwork.","code":"meta_angola = append_aggregated_networks(meta_angola) print(meta_angola) ## object of class metanetwork  ## metaweb has 28 nodes and 127 edges  ## 2 local networks  ## available resolutions are: Species Phylum"},{"path":"https://marcohlmann.github.io/metanetwork/index.html","id":"representing-aggregated-networks-adding-a-legend-to-networks","dir":"","previous_headings":"","what":"Representing aggregated networks, adding a legend to networks","title":"Handling and representing trophic networks in space and time","text":"computed, ggmetanet function allows representing aggregated networks legending local networks using trophic table. forget first compute trophic levels.  Node sizes proportional relative abundances. Trophic table allows adding legend network finest resolution.","code":"meta_angola = compute_trophic_levels(meta_angola) ggmetanet(g = meta_angola$metaweb_Phylum,beta = 1,metanetwork = meta_angola) ggmetanet(g = meta_angola$metaweb,beta = 0.04,legend = 'Phylum',metanetwork = meta_angola)"},{"path":"https://marcohlmann.github.io/metanetwork/index.html","id":"diff_plot","dir":"","previous_headings":"","what":"diff_plot","title":"Handling and representing trophic networks in space and time","text":"","code":"diff_plot(g1 = meta_angola$X1986,g2 = meta_angola$X2003,beta = 0.04,metanetwork = meta_angola)"},{"path":"https://marcohlmann.github.io/metanetwork/index.html","id":"vismetanetwork-function","dir":"","previous_headings":"","what":"vismetaNetwork function","title":"Handling and representing trophic networks in space and time","text":"metanetwork allows representing trophic networks interactive way using visNetwork function layout algorithms. highly recommend function explore large dense networks. Since outputs functions rendered README, saved ./vismetaNetwork html format. x_y_range argument allows controlling x-axis y-axis scale. Interactive visualisation angola dataset trophic networks using vismetaNetwork available https://shiny.osug.fr/app/ecological-networks.","code":"vismetaNetwork(metanetwork = meta_angola,beta = 0.04,legend = 'group',x_y_range = c(10,0.05))"},{"path":"https://marcohlmann.github.io/metanetwork/index.html","id":"authors","dir":"","previous_headings":"","what":"Authors","title":"Handling and representing trophic networks in space and time","text":"package currently developed Marc Ohlmann Laboratoire d’Ecologie Alpine, Grenoble Jimmy Garnier Laurent Vuillon Laboratoire de Mathématiques, Chambéry. supported ANR ‘Globnets’.","code":""},{"path":"https://marcohlmann.github.io/metanetwork/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Handling and representing trophic networks in space and time","text":"bugs, information feedback, please contact Marc Ohlmann.","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/TL_tsne.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default configuration for the diffusion kernel based t-sne — TL_tsne.default","title":"Default configuration for the diffusion kernel based t-sne — TL_tsne.default","text":"list parameters customizing configuration diffusion kernel based t-sne (see 'tsne' R package documentation)","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/TL_tsne.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default configuration for the diffusion kernel based t-sne — TL_tsne.default","text":"","code":"TL_tsne.default"},{"path":"https://marcohlmann.github.io/metanetwork/reference/TL_tsne.default.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Default configuration for the diffusion kernel based t-sne — TL_tsne.default","text":"object class metanetwork_config length 11.","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/TL_tsne.default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default configuration for the diffusion kernel based t-sne — TL_tsne.default","text":"","code":"# display all default settings TL_tsne.default #> $max_iter #> [1] 300 #>  #> $min_cost #> [1] 0 #>  #> $epoch_callback #> NULL #>  #> $epoch #> [1] 100 #>  #> $momentum #> [1] 0.01 #>  #> $final_momentum #> [1] 0.3 #>  #> $mom_switch_iter #> [1] 250 #>  #> $epsilon #> [1] 2 #>  #> $min_gain #> [1] 0.01 #>  #> $initial_P_gain #> [1] 4 #>  #> $eps #> [1] 2.220446e-16 #>  #> attr(,\"class\") #> [1] \"metanetwork_config\"  # create a new settings object with n_neighbors set to 5 TL_tsne.custom = TL_tsne.default TL_tsne.custom$max_iter = 5 TL_tsne.custom #> $max_iter #> [1] 5 #>  #> $min_cost #> [1] 0 #>  #> $epoch_callback #> NULL #>  #> $epoch #> [1] 100 #>  #> $momentum #> [1] 0.01 #>  #> $final_momentum #> [1] 0.3 #>  #> $mom_switch_iter #> [1] 250 #>  #> $epsilon #> [1] 2 #>  #> $min_gain #> [1] 0.01 #>  #> $initial_P_gain #> [1] 4 #>  #> $eps #> [1] 2.220446e-16 #>  #> attr(,\"class\") #> [1] \"metanetwork_config\""},{"path":"https://marcohlmann.github.io/metanetwork/reference/append_agg_nets.html","id":null,"dir":"Reference","previous_headings":"","what":"append aggregated networks — append_agg_nets","title":"append aggregated networks — append_agg_nets","text":"Method append aggregated metawebs aggregated local networks using  hierarchy describes trophicTable","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/append_agg_nets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"append aggregated networks — append_agg_nets","text":"","code":"append_agg_nets(metanetwork)  # S3 method for metanetwork append_agg_nets(metanetwork)"},{"path":"https://marcohlmann.github.io/metanetwork/reference/append_agg_nets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"append aggregated networks — append_agg_nets","text":"metanetwork object class 'metanetwork'","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/append_agg_nets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"append aggregated networks — append_agg_nets","text":"object class 'metanetwork' NULL","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/append_agg_nets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"append aggregated networks — append_agg_nets","text":"","code":"library(metanetwork) append_agg_nets(meta_angola) #> $metaweb #> IGRAPH f873652 DNW- 28 127 -- metaweb #> + attr: res (g/c), name (g/c), name (v/c), ab (v/n), TL (v/n), weight #> | (e/n) #> + edges from f873652 (vertex names): #>  [1] Trachurus ->Haemulidae     Trachurus ->Marine mammals #>  [3] Sardinella->Ariidae        Sardinella->Merluccius     #>  [5] Sardinella->Pseudotolithus Sardinella->Serranidae     #>  [7] Sardinella->Haemulidae     Sardinella->Small pelagics #>  [9] Sardinella->Large pelagics Sardinella->Cephalopodes   #> [11] Sardinella->Marine mammals Sardinella->Marine birds   #> [13] Sciaenidae->Merluccius     Sciaenidae->Serranidae     #> + ... omitted several edges #>  #> $abTable #>       Trachurus Sardinella Sciaenidae    Ariidae Merluccius      Dentex #> X1986 0.3100092  0.3144169 0.02424242 0.01689624 0.02938476 0.007346189 #> X2003 0.1465201  0.1792717 0.06895066 0.02413273 0.00258565 0.068950657 #>       Pseudotolithus  Serranidae Polynemidae Parapenaeus longirostris #> X1986    0.004407713 0.004407713 0.005876951              0.009550046 #> X2003    0.072398190 0.018961431 0.017237664              0.006377936 #>        Haemulidae Aristeus varidens Small pelagics Mesopelagics Large pelagics #> X1986 0.008080808       0.003673095     0.03746556  0.001469238    0.004407713 #> X2003 0.020685197       0.005860806     0.07239819  0.003447533    0.003275156 #>       Demersal fish Chondrichthyes Cephalopodes Miscellaneous     Penaeus #> X1986   0.005876951    0.002938476 0.0007346189   0.007346189 0.001469238 #> X2003   0.034475329    0.013790131 0.0068950657   0.027580263 0.006205559 #>       Marine mammals Marine birds Macrobenthos Middlebenthos Large Zoo #> X1986          0.025        0.025        0.025         0.025     0.025 #> X2003          0.025        0.025        0.025         0.025     0.025 #>       Small Zoo Phytoplankton Detritus #> X1986     0.025         0.025    0.025 #> X2003     0.025         0.025    0.025 #>  #> $trophicTable #>                                           Species     Phylum #> Ariidae                                   Ariidae       Fish #> Aristeus varidens               Aristeus varidens Arthropoda #> Cephalopodes                         Cephalopodes   Mollusca #> Chondrichthyes                     Chondrichthyes    Benthos #> Demersal fish                       Demersal fish       Fish #> Dentex                                     Dentex       Fish #> Detritus                                 Detritus      Plant #> Haemulidae                             Haemulidae       Fish #> Large pelagics                     Large pelagics       Fish #> Large Zoo                               Large Zoo   Plankton #> Macrobenthos                         Macrobenthos    Benthos #> Marine birds                         Marine birds       Bird #> Marine mammals                     Marine mammals    Mammals #> Merluccius                             Merluccius       Fish #> Mesopelagics                         Mesopelagics       Fish #> Middlebenthos                       Middlebenthos    Benthos #> Miscellaneous                       Miscellaneous Arthropoda #> Parapenaeus longirostris Parapenaeus longirostris Arthropoda #> Penaeus                                   Penaeus Arthropoda #> Phytoplankton                       Phytoplankton   Plankton #> Polynemidae                           Polynemidae       Fish #> Pseudotolithus                     Pseudotolithus       Fish #> Sardinella                             Sardinella       Fish #> Sciaenidae                             Sciaenidae       Fish #> Serranidae                             Serranidae       Fish #> Small pelagics                     Small pelagics       Fish #> Small Zoo                               Small Zoo   Plankton #> Trachurus                               Trachurus       Fish #>  #> $covariable #> NULL #>  #> $X1986 #> IGRAPH eeeeb2e DNW- 28 127 -- X1986 #> + attr: res (g/c), name (g/c), name (v/c), ab (v/n), TL (v/n), weight #> | (e/n) #> + edges from eeeeb2e (vertex names): #>  [1] Trachurus ->Haemulidae     Trachurus ->Marine mammals #>  [3] Sardinella->Ariidae        Sardinella->Merluccius     #>  [5] Sardinella->Pseudotolithus Sardinella->Serranidae     #>  [7] Sardinella->Haemulidae     Sardinella->Small pelagics #>  [9] Sardinella->Large pelagics Sardinella->Cephalopodes   #> [11] Sardinella->Marine mammals Sardinella->Marine birds   #> [13] Sciaenidae->Merluccius     Sciaenidae->Serranidae     #> + ... omitted several edges #>  #> $X2003 #> IGRAPH b673113 DNW- 28 127 -- X2003 #> + attr: res (g/c), name (g/c), name (v/c), ab (v/n), TL (v/n), weight #> | (e/n) #> + edges from b673113 (vertex names): #>  [1] Trachurus ->Haemulidae     Trachurus ->Marine mammals #>  [3] Sardinella->Ariidae        Sardinella->Merluccius     #>  [5] Sardinella->Pseudotolithus Sardinella->Serranidae     #>  [7] Sardinella->Haemulidae     Sardinella->Small pelagics #>  [9] Sardinella->Large pelagics Sardinella->Cephalopodes   #> [11] Sardinella->Marine mammals Sardinella->Marine birds   #> [13] Sciaenidae->Merluccius     Sciaenidae->Serranidae     #> + ... omitted several edges #>  #> $metaweb_Phylum #> IGRAPH 59e9c66 DNW- 8 24 -- metaweb #> + attr: res (g/c), name (g/c), name (v/c), ab (v/n), weight (e/n) #> + edges from 59e9c66 (vertex names): #>  [1] Arthropoda->Benthos    Arthropoda->Bird       Arthropoda->Fish       #>  [4] Arthropoda->Mammals    Arthropoda->Mollusca   Benthos   ->Arthropoda #>  [7] Benthos   ->Benthos    Benthos   ->Fish       Benthos   ->Mollusca   #> [10] Fish      ->Benthos    Fish      ->Bird       Fish      ->Fish       #> [13] Fish      ->Mammals    Fish      ->Mollusca   Plankton  ->Arthropoda #> [16] Plankton  ->Benthos    Plankton  ->Bird       Plankton  ->Fish       #> [19] Plankton  ->Mollusca   Plankton  ->Plankton   Plant     ->Arthropoda #> [22] Plant     ->Benthos    Plant     ->Fish       Plant     ->Plankton   #>  #> $X1986_Phylum #> IGRAPH 0d9fa78 DNW- 8 24 -- X1986 #> + attr: res (g/c), name (g/c), name (v/c), ab (v/n), weight (e/n) #> + edges from 0d9fa78 (vertex names): #>  [1] Arthropoda->Benthos    Arthropoda->Bird       Arthropoda->Fish       #>  [4] Arthropoda->Mammals    Arthropoda->Mollusca   Benthos   ->Arthropoda #>  [7] Benthos   ->Benthos    Benthos   ->Fish       Benthos   ->Mollusca   #> [10] Fish      ->Benthos    Fish      ->Bird       Fish      ->Fish       #> [13] Fish      ->Mammals    Fish      ->Mollusca   Plankton  ->Arthropoda #> [16] Plankton  ->Benthos    Plankton  ->Bird       Plankton  ->Fish       #> [19] Plankton  ->Mollusca   Plankton  ->Plankton   Plant     ->Arthropoda #> [22] Plant     ->Benthos    Plant     ->Fish       Plant     ->Plankton   #>  #> $X2003_Phylum #> IGRAPH a8f1546 DNW- 8 24 -- X2003 #> + attr: res (g/c), name (g/c), name (v/c), ab (v/n), weight (e/n) #> + edges from a8f1546 (vertex names): #>  [1] Arthropoda->Benthos    Arthropoda->Bird       Arthropoda->Fish       #>  [4] Arthropoda->Mammals    Arthropoda->Mollusca   Benthos   ->Arthropoda #>  [7] Benthos   ->Benthos    Benthos   ->Fish       Benthos   ->Mollusca   #> [10] Fish      ->Benthos    Fish      ->Bird       Fish      ->Fish       #> [13] Fish      ->Mammals    Fish      ->Mollusca   Plankton  ->Arthropoda #> [16] Plankton  ->Benthos    Plankton  ->Bird       Plankton  ->Fish       #> [19] Plankton  ->Mollusca   Plankton  ->Plankton   Plant     ->Arthropoda #> [22] Plant     ->Benthos    Plant     ->Fish       Plant     ->Plankton   #>  #> attr(,\"class\") #> [1] \"metanetwork\""},{"path":"https://marcohlmann.github.io/metanetwork/reference/append_mean_nets.html","id":null,"dir":"Reference","previous_headings":"","what":"append mean networks — append_mean_nets","title":"append mean networks — append_mean_nets","text":"Append mean networks per (discrete) value covariable","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/append_mean_nets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"append mean networks — append_mean_nets","text":"","code":"append_mean_nets(metanetwork)  # S3 method for metanetwork append_mean_nets(metanetwork)"},{"path":"https://marcohlmann.github.io/metanetwork/reference/append_mean_nets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"append mean networks — append_mean_nets","text":"metanetwork object class 'metanetwork'","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/append_mean_nets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"append mean networks — append_mean_nets","text":"object class 'metanetwork' mean networks appended per value covariable resolutions NULL","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/append_mean_nets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"append mean networks — append_mean_nets","text":"","code":"library(igraph) #>  #> Attaching package: ‘igraph’ #> The following objects are masked from ‘package:stats’: #>  #>     decompose, spectrum #> The following object is masked from ‘package:base’: #>  #>     union library(metanetwork)"},{"path":"https://marcohlmann.github.io/metanetwork/reference/attach_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"compute and attach 'TL-tsne' layout — attach_layout","title":"compute and attach 'TL-tsne' layout — attach_layout","text":"Method compute 'TL-tsne' layout save node attributes focal network. node focal network attribute layout_beta_VALUE. function run several times given beta value, repetitions layout algorithm stored node attributes","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/attach_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"compute and attach 'TL-tsne' layout — attach_layout","text":"","code":"attach_layout(   metanetwork,   g = NULL,   beta = 0.1,   mode = \"TL-tsne\",   TL_tsne.config = TL_tsne.default )  # S3 method for metanetwork attach_layout(   metanetwork,   g = NULL,   beta = 0.1,   mode = \"TL-tsne\",   TL_tsne.config = TL_tsne.default )"},{"path":"https://marcohlmann.github.io/metanetwork/reference/attach_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"compute and attach 'TL-tsne' layout — attach_layout","text":"metanetwork object class 'metanetwork' g character indicating name network 'TL-tsne' layout computed, default 'metaweb' beta diffusion parameter diffusion kernel, positive scalar controlling  squeezing network mode 'TL-tsne' supported function TL_tsne.config configuration list mode 'TL-tsne', default TL_tsne.default","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/attach_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"compute and attach 'TL-tsne' layout — attach_layout","text":"'metanetwork' object layout added node attribute considered network NULL","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/attach_layout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"compute and attach 'TL-tsne' layout — attach_layout","text":"","code":"library(metanetwork) library(igraph) # on angola dataset (metaweb) meta_angola = attach_layout(meta_angola,beta = 0.05) #> beta = 0.05 #> Epoch: Iteration #100 error is: 907.410775018073 #> Epoch: Iteration #200 error is: 217.117921401331 #> Epoch: Iteration #300 error is: 217.231830964565 V(meta_angola$metaweb)$layout_beta0.05 #>  [1]  18.1773513   6.3387259  -2.5156989   4.2557880  14.3539972 -11.2757448 #>  [7] -31.0358607  -4.8397862 -23.9839391 -21.3977528  -7.2747412 -27.2976576 #> [13]  10.7375621  20.8422871  26.6799094  -0.1177639  23.5155111 -15.3404072 #> [19]   2.2531012 -17.8379430   8.5288068  31.3281007  -9.1845559 -13.3597680 #> [25]  16.1837836  12.7842752   8.9878078 -19.5053881 # on a local network meta_angola = attach_layout(meta_angola,g = meta_angola$X1986,beta = 0.05) #> beta = 0.05 #> Epoch: Iteration #100 error is: 907.410775019159 #> Epoch: Iteration #200 error is: 217.125917916643 #> Epoch: Iteration #300 error is: 217.254374810136  # getting repetitions meta_angola = attach_layout(meta_angola,beta = 0.05) #> beta = 0.05 #> Epoch: Iteration #100 error is: 907.410775018624 #> Epoch: Iteration #200 error is: 217.122663306626 #> Epoch: Iteration #300 error is: 217.25243726917 V(meta_angola$metaweb)$layout_beta0.05 #>  [1]  18.1773513   6.3387259  -2.5156989   4.2557880  14.3539972 -11.2757448 #>  [7] -31.0358607  -4.8397862 -23.9839391 -21.3977528  -7.2747412 -27.2976576 #> [13]  10.7375621  20.8422871  26.6799094  -0.1177639  23.5155111 -15.3404072 #> [19]   2.2531012 -17.8379430   8.5288068  31.3281007  -9.1845559 -13.3597680 #> [25]  16.1837836  12.7842752   8.9878078 -19.5053881 V(meta_angola$metaweb)$layout_beta0.05_1 #>  [1]  23.0082322   6.1008829  -4.8228874   4.1517190  14.1356611 -15.1547581 #>  [7] -30.6678522  -7.1222101 -23.6977066 -21.1254352 -11.1428182 -26.9967478 #> [13]  11.2206509  17.9652923  26.3786787   1.9252790  20.2885132  -2.4267180 #> [19]  -0.3017448 -17.6393118   9.5648710  31.0035875  -9.2247746 -13.1686098 #> [25]   8.2482646  15.8131111  12.9148870 -19.2280556"},{"path":"https://marcohlmann.github.io/metanetwork/reference/build_metanet.html","id":null,"dir":"Reference","previous_headings":"","what":"Build metanetwork object — build_metanet","title":"Build metanetwork object — build_metanet","text":"Build metanetwork object","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/build_metanet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build metanetwork object — build_metanet","text":"","code":"build_metanet(   metaweb,   abTable = NULL,   trophicTable = NULL,   compute_local_nets = TRUE,   covariable = NULL )"},{"path":"https://marcohlmann.github.io/metanetwork/reference/build_metanet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build metanetwork object — build_metanet","text":"metaweb metaweb metanetwork, object class 'graph', 'matrix', 'data.frame' 'dgCMatrix'.  Metaweb needs directed connected. parameter must non-null. abTable abundances nodes local networks, matrix class 'matrix', columns must names corresponding node labels metaweb, rows node abundances local networks. Default null, case, uniform abundances assigned trophicTable 'matrix' 'data.frame' indicating hierarchy nodes. Names columns correspond different resolutions. indicates membership node metaweb. Default null. compute_local_nets boolean, indicates whether local networks must computed . Default TRUE covariable vector class character indicating qualitative covariables local networks , default null.","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/build_metanet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build metanetwork object — build_metanet","text":"object S3 class 'metanetwork'","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/build_metanet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build metanetwork object — build_metanet","text":"","code":"library(metanetwork) library(igraph) #with a single metaweb g = igraph::make_ring(5,directed = TRUE) meta = build_metanet(g) #> Warning: nodes of metaweb do not have names. Assigning integers as names #on Angola dataset (re-building the dataset) metaweb = meta_angola$metaweb abTable = meta_angola$abTable trophicTable = meta_angola$trophicTable  meta_angola = build_metanet(metaweb,abTable,trophicTable)"},{"path":"https://marcohlmann.github.io/metanetwork/reference/compute_TL.html","id":null,"dir":"Reference","previous_headings":"","what":"compute trophic levels — compute_TL","title":"compute trophic levels — compute_TL","text":"Compute trophic levels using graph laplacian","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/compute_TL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"compute trophic levels — compute_TL","text":"","code":"compute_TL(metanetwork)  # S3 method for metanetwork compute_TL(metanetwork)"},{"path":"https://marcohlmann.github.io/metanetwork/reference/compute_TL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"compute trophic levels — compute_TL","text":"metanetwork object class 'metanetwork'","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/compute_TL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"compute trophic levels — compute_TL","text":"object class 'metanetwork' node attribude TLNULL","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/compute_TL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"compute trophic levels — compute_TL","text":"","code":"library(metanetwork) library(igraph)  #on angola dataset meta_angola  = compute_TL(meta_angola) V(meta_angola$metaweb)$TL #>  [1] 1.5819853 1.3046314 1.8207464 2.2772862 1.9374378 1.9280135 2.5847122 #>  [8] 1.9150426 1.8696796 0.9721697 2.1079731 1.0974520 1.3157930 1.6233394 #> [15] 2.0829452 1.8709379 2.7391262 2.1144788 1.3122002 0.9820602 2.5636889 #> [22] 2.1213395 1.0005468 0.9115165 0.8937117 0.6906842 0.1142234 0.0000000"},{"path":"https://marcohlmann.github.io/metanetwork/reference/diff_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"plot difference network — diff_plot","title":"plot difference network — diff_plot","text":"Function represent difference two networks belonging metanetwork  layout based diffusion kernel, using either 'ggnet' 'visNetwork' visualisation","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/diff_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot difference network — diff_plot","text":"","code":"diff_plot(   metanetwork,   g1,   g2,   beta = 0.1,   mode = \"TL-tsne\",   vis_tool = \"ggnet\",   edge_thrs = NULL,   layout_metaweb = F,   flip_coords = F,   alpha_per_group = NULL,   alpha_per_node = NULL,   TL_tsne.config = TL_tsne.default,   nrep_ly = 1,   ggnet.config = ggnet.default,   visNetwork.config = visNetwork.default )"},{"path":"https://marcohlmann.github.io/metanetwork/reference/diff_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot difference network — diff_plot","text":"metanetwork object class 'metanetwork' g1 network (class 'igraph') metanetwork g2 network (class 'igraph') metanetwork beta diffusion parameter diffusion kernel, positive scalar controlling  squeezing network mode mode used layout, 'TL-tsne' trophic level t-sne 'TL-kpco' trophic level kernel based pco. Default 'TL-tsne' vis_tool character indicating visualisation tool, either 'ggnet' visNetwork edge_thrs non-null, numeric (0 1) indicating edge threshold representation layout_metaweb boolean indicating whether layout metaweb used represent difference network. use metaweb layout = T, need first compute metaweb layout beta value using attach_layout() flip_coords boolean indicating wheter coordinates flipped.  case, y-axis trophic level x-axis layout axis alpha_per_group controlling alpha per group ('ggnet' vis), list format  list(resolutions = \"XX\",groups = XX,alpha_focal = XX,alpha_hidden = XX), see example alpha_per_node controlling alpha per node ('ggnet' vis), list format  list(nodes = XX,alpha_focal = XX,alpha_hidden = XX), see example TL_tsne.config configuration list mode 'TL-tsne', default TL_tsne.default nrep_ly several layouts beta value attached metaweb  (layout_metaweb = T), index layout use, see attach_layout() ggnet.config configuration list ggnet representation, default ggnet.default visNetwork.config configuration list visNetwork representation, default visNetwork.default","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/diff_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot difference network — diff_plot","text":"plot difference network, either using 'ggnet' 'visNetwork'","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/diff_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plot difference network — diff_plot","text":"","code":"#on Angola dataset library(igraph) library(metanetwork)  diff_plot(g1 = meta_angola$X2003,g2 = meta_angola$X1986,metanetwork = meta_angola, beta = 0.05) #> mode is TL-tsne #> plotting: X2003_Species - X1986_Species #> mode is TL-tsne #> beta = 0.05 #> Epoch: Iteration #100 error is: 907.373467950921 #> Epoch: Iteration #200 error is: 217.124038540617 #> Epoch: Iteration #300 error is: 217.249655122821  #using visNetwork diff_plot(g1 = meta_angola$X2003,g2 = meta_angola$X1986,metanetwork = meta_angola, beta = 0.05,vis_tool = \"visNetwork\") #> mode is TL-tsne #> plotting: X2003_Species - X1986_Species #> beta = 0.05 #> Epoch: Iteration #100 error is: 907.373467951619 #> Epoch: Iteration #200 error is: 217.106284241836 #> Epoch: Iteration #300 error is: 217.226872998474 #> x_max = 1356.85756899361 #> y_max = 359.385742403501 #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  #computing and using metaweb layout for diffplot meta_angola = attach_layout(meta_angola,beta = 0.1) #> beta = 0.1 #> Epoch: Iteration #100 error is: 838.97058802867 #> Epoch: Iteration #200 error is: 199.589204589066 #> Epoch: Iteration #300 error is: 199.58919020088 diff_plot(g1 = meta_angola$X2003,g2 = meta_angola$X1986,metanetwork = meta_angola, beta = 0.1,layout_metaweb = TRUE) #> mode is TL-tsne #> plotting: X2003_Species - X1986_Species #> mode is TL-tsne  #using visNetwork diff_plot(g1 = meta_angola$X2003,g2 = meta_angola$X1986,metanetwork = meta_angola, beta = 0.1,layout_metaweb = TRUE,vis_tool = \"visNetwork\") #> mode is TL-tsne #> plotting: X2003_Species - X1986_Species #> x_max = 1259.92651522773 #> y_max = 340.638960573534 #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ##contrasting alpha  #per group diff_plot(metanetwork = meta_angola,g1 = meta_angola$X2003,g2 = meta_angola$X1986,beta = 0.05,           alpha_per_group = list(resolution = \"Phylum\",groups = c(\"Fish\"), alpha_focal = 0.01,alpha_hidden = 0.8)) #> mode is TL-tsne #> plotting: X2003_Species - X1986_Species #> mode is TL-tsne #> beta = 0.05 #> Epoch: Iteration #100 error is: 907.373467952319 #> Epoch: Iteration #200 error is: 217.143160299553 #> Epoch: Iteration #300 error is: 217.275369915902  #per node            diff_plot(metanetwork = meta_angola,g1 = meta_angola$X2003,g2 = meta_angola$X1986,beta = 0.05, alpha_per_node = list(nodes = c(\"Detritus\",\"Phytoplankton\"), alpha_focal = 0.01,alpha_hidden = 0.8)) #> mode is TL-tsne #> plotting: X2003_Species - X1986_Species #> mode is TL-tsne #> beta = 0.05 #> Epoch: Iteration #100 error is: 907.373467952307 #> Epoch: Iteration #200 error is: 217.133478230982 #> Epoch: Iteration #300 error is: 217.257318302669"},{"path":"https://marcohlmann.github.io/metanetwork/reference/extract_networks.html","id":null,"dir":"Reference","previous_headings":"","what":"extract networks from metanetwork — extract_networks","title":"extract networks from metanetwork — extract_networks","text":"Function extract metawebs local networks metanetwork","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/extract_networks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract networks from metanetwork — extract_networks","text":"","code":"extract_networks(metanetwork)"},{"path":"https://marcohlmann.github.io/metanetwork/reference/extract_networks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract networks from metanetwork — extract_networks","text":"metanetwork object whose networks need extracted","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/extract_networks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extract networks from metanetwork — extract_networks","text":"list igraph objects attributes computed metanetwork","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/extract_networks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"extract networks from metanetwork — extract_networks","text":"Return list 'igraph' objects","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/extract_networks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"extract networks from metanetwork — extract_networks","text":"","code":"library(metanetwork)  extract_networks(meta_angola)   #> $metaweb #> IGRAPH f873652 DNW- 28 127 -- metaweb #> + attr: res (g/c), name (g/c), name (v/c), ab (v/n), TL (v/n), weight #> | (e/n) #> + edges from f873652 (vertex names): #>  [1] Trachurus ->Haemulidae     Trachurus ->Marine mammals #>  [3] Sardinella->Ariidae        Sardinella->Merluccius     #>  [5] Sardinella->Pseudotolithus Sardinella->Serranidae     #>  [7] Sardinella->Haemulidae     Sardinella->Small pelagics #>  [9] Sardinella->Large pelagics Sardinella->Cephalopodes   #> [11] Sardinella->Marine mammals Sardinella->Marine birds   #> [13] Sciaenidae->Merluccius     Sciaenidae->Serranidae     #> + ... omitted several edges #>  #> $X1986 #> IGRAPH eeeeb2e DNW- 28 127 -- X1986 #> + attr: res (g/c), name (g/c), name (v/c), ab (v/n), TL (v/n), weight #> | (e/n) #> + edges from eeeeb2e (vertex names): #>  [1] Trachurus ->Haemulidae     Trachurus ->Marine mammals #>  [3] Sardinella->Ariidae        Sardinella->Merluccius     #>  [5] Sardinella->Pseudotolithus Sardinella->Serranidae     #>  [7] Sardinella->Haemulidae     Sardinella->Small pelagics #>  [9] Sardinella->Large pelagics Sardinella->Cephalopodes   #> [11] Sardinella->Marine mammals Sardinella->Marine birds   #> [13] Sciaenidae->Merluccius     Sciaenidae->Serranidae     #> + ... omitted several edges #>  #> $X2003 #> IGRAPH b673113 DNW- 28 127 -- X2003 #> + attr: res (g/c), name (g/c), name (v/c), ab (v/n), TL (v/n), weight #> | (e/n) #> + edges from b673113 (vertex names): #>  [1] Trachurus ->Haemulidae     Trachurus ->Marine mammals #>  [3] Sardinella->Ariidae        Sardinella->Merluccius     #>  [5] Sardinella->Pseudotolithus Sardinella->Serranidae     #>  [7] Sardinella->Haemulidae     Sardinella->Small pelagics #>  [9] Sardinella->Large pelagics Sardinella->Cephalopodes   #> [11] Sardinella->Marine mammals Sardinella->Marine birds   #> [13] Sciaenidae->Merluccius     Sciaenidae->Serranidae     #> + ... omitted several edges #>  #> $metaweb_Phylum #> IGRAPH c10842b DNW- 8 24 -- metaweb #> + attr: res (g/c), name (g/c), name (v/c), ab (v/n), TL (v/n), weight #> | (e/n) #> + edges from c10842b (vertex names): #>  [1] Arthropoda->Benthos    Arthropoda->Bird       Arthropoda->Fish       #>  [4] Arthropoda->Mammals    Arthropoda->Mollusca   Benthos   ->Arthropoda #>  [7] Benthos   ->Benthos    Benthos   ->Fish       Benthos   ->Mollusca   #> [10] Fish      ->Benthos    Fish      ->Bird       Fish      ->Fish       #> [13] Fish      ->Mammals    Fish      ->Mollusca   Plankton  ->Arthropoda #> [16] Plankton  ->Benthos    Plankton  ->Bird       Plankton  ->Fish       #> [19] Plankton  ->Mollusca   Plankton  ->Plankton   Plant     ->Arthropoda #> + ... omitted several edges #>  #> $X1986_Phylum #> IGRAPH 5b047af DNW- 8 24 -- X1986 #> + attr: res (g/c), name (g/c), name (v/c), ab (v/n), TL (v/n), weight #> | (e/n) #> + edges from 5b047af (vertex names): #>  [1] Arthropoda->Benthos    Arthropoda->Bird       Arthropoda->Fish       #>  [4] Arthropoda->Mammals    Arthropoda->Mollusca   Benthos   ->Arthropoda #>  [7] Benthos   ->Benthos    Benthos   ->Fish       Benthos   ->Mollusca   #> [10] Fish      ->Benthos    Fish      ->Bird       Fish      ->Fish       #> [13] Fish      ->Mammals    Fish      ->Mollusca   Plankton  ->Arthropoda #> [16] Plankton  ->Benthos    Plankton  ->Bird       Plankton  ->Fish       #> [19] Plankton  ->Mollusca   Plankton  ->Plankton   Plant     ->Arthropoda #> + ... omitted several edges #>  #> $X2003_Phylum #> IGRAPH 0cb713d DNW- 8 24 -- X2003 #> + attr: res (g/c), name (g/c), name (v/c), ab (v/n), TL (v/n), weight #> | (e/n) #> + edges from 0cb713d (vertex names): #>  [1] Arthropoda->Benthos    Arthropoda->Bird       Arthropoda->Fish       #>  [4] Arthropoda->Mammals    Arthropoda->Mollusca   Benthos   ->Arthropoda #>  [7] Benthos   ->Benthos    Benthos   ->Fish       Benthos   ->Mollusca   #> [10] Fish      ->Benthos    Fish      ->Bird       Fish      ->Fish       #> [13] Fish      ->Mammals    Fish      ->Mollusca   Plankton  ->Arthropoda #> [16] Plankton  ->Benthos    Plankton  ->Bird       Plankton  ->Fish       #> [19] Plankton  ->Mollusca   Plankton  ->Plankton   Plant     ->Arthropoda #> + ... omitted several edges #>"},{"path":"https://marcohlmann.github.io/metanetwork/reference/ggmetanet.html","id":null,"dir":"Reference","previous_headings":"","what":"ggmetanet — ggmetanet","title":"ggmetanet — ggmetanet","text":"Function provides network static representation  (using 'ggnet')  'metanetwork' object layout based diffusion kernel","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/ggmetanet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ggmetanet — ggmetanet","text":"","code":"ggmetanet(   metanetwork,   g = NULL,   beta = 0.1,   legend = NULL,   mode = \"TL-tsne\",   edge_thrs = NULL,   layout_metaweb = F,   nrep_ly = 1,   flip_coords = F,   diff_plot_bool = F,   alpha_per_group = NULL,   alpha_per_node = NULL,   alpha_interactive = F,   ggnet.config = ggnet.default,   TL_tsne.config = TL_tsne.default )"},{"path":"https://marcohlmann.github.io/metanetwork/reference/ggmetanet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ggmetanet — ggmetanet","text":"metanetwork object class metanetwork g network (igraph object) represent, default metaweb beta diffusion parameter diffusion kernel, positive scalar controlling  vertical squeezing network legend resolution legend, legend resolution must coarser resolution resolution g, default NULL mode mode used layout, 'TL-tsne' trophic level t-sne 'TL-kpco' trophic level kernel based pco. Default 'TL-tsne' edge_thrs non-null, numeric (0 1) indicating edge threshold representation layout_metaweb boolean indicating whether layout metaweb used represent network use metaweb layout = T, need first compute metaweb layout beta value using attach_layout() nrep_ly several layouts beta value attached metaweb (layout_metaweb = T), index layout use, see attach_layout() flip_coords boolean indicating wheter coordinates flipped. diff_plot_bool boolean, edit hand alpha_per_group controlling alpha per group ('ggnet' vis), list format  list(resolutions = \"XX\",groups = XX,alpha_focal = XX,alpha_hidden = XX), see example alpha_per_node controlling alpha per node ('ggnet' vis), list format  list(nodes = XX,alpha_focal = XX,alpha_hidden = XX), see example case, y-axis trophic level x-axis layout axis alpha_interactive boolean indicating whether alpha (node transparency)  asked interactive mode user ggnet.config configuration list ggnet representation, default ggnet.default TL_tsne.config configuration list mode 'TL-tsne', default TL_tsne.default","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/ggmetanet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ggmetanet — ggmetanet","text":"object class 'ggplot'","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/ggmetanet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ggmetanet — ggmetanet","text":"","code":"library(metanetwork) library(igraph)  g = make_ring(5,directed = TRUE) meta0 = build_metanet(g) #> Warning: nodes of metaweb do not have names. Assigning integers as names meta0 = compute_TL(meta0) ggmetanet(meta0) #> mode is TL-tsne #> beta = 0.1 #> Epoch: Iteration #100 error is: 145.61670817985 #> Epoch: Iteration #200 error is: 34.6730933851416 #> Epoch: Iteration #300 error is: 34.6730836103296 #> Warning: node.size is invariant; size.cut ignored #> Warning: Removed 5 rows containing missing values (geom_segment). #> Warning: Removed 5 rows containing missing values (geom_point). #> Warning: Removed 5 rows containing missing values (geom_text).   # angola dataset meta_angola = compute_TL(meta_angola) ggmetanet(meta_angola,legend = 'Phylum',beta = 0.05) #> mode is TL-tsne #> beta = 0.05 #> Epoch: Iteration #100 error is: 907.410775020983 #> Epoch: Iteration #200 error is: 217.131229259364 #> Epoch: Iteration #300 error is: 217.25935450908"},{"path":"https://marcohlmann.github.io/metanetwork/reference/ggnet.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default configuration for ggnet — ggnet.default","title":"Default configuration for ggnet — ggnet.default","text":"list parameters customizing ggmetanet representation (see ggnet documentations)","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/ggnet.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default configuration for ggnet — ggnet.default","text":"","code":"ggnet.default"},{"path":"https://marcohlmann.github.io/metanetwork/reference/ggnet.default.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Default configuration for ggnet — ggnet.default","text":"object class metanetwork_config length 14.","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/ggnet.default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default configuration for ggnet — ggnet.default","text":"","code":"# display all default settings ggnet.default #> $label #> [1] TRUE #>  #> $label.size #> [1] 3 #>  #> $max_size #> [1] 5 #>  #> $edge.size #> [1] 0.5 #>  #> $arrow.size #> [1] 6 #>  #> $arrow.gap #> [1] 0.015 #>  #> $alpha #> [1] 0.8 #>  #> $edge.alpha #> [1] 0.5 #>  #> $alpha_diff #> [1] 0.8 #>  #> $edge.alpha_diff #> [1] 0.8 #>  #> $size.cut #> [1] 5 #>  #> $palette #> [1] \"Set2\" #>  #> $default.color #> [1] \"grey75\" #>  #> $legend.position #> [1] \"bottom\" #>  #> attr(,\"class\") #> [1] \"metanetwork_config\"  # create a new settings ggnet.custom = ggnet.default ggnet.custom$edge.size = 2 ggnet.custom #> $label #> [1] TRUE #>  #> $label.size #> [1] 3 #>  #> $max_size #> [1] 5 #>  #> $edge.size #> [1] 2 #>  #> $arrow.size #> [1] 6 #>  #> $arrow.gap #> [1] 0.015 #>  #> $alpha #> [1] 0.8 #>  #> $edge.alpha #> [1] 0.5 #>  #> $alpha_diff #> [1] 0.8 #>  #> $edge.alpha_diff #> [1] 0.8 #>  #> $size.cut #> [1] 5 #>  #> $palette #> [1] \"Set2\" #>  #> $default.color #> [1] \"grey75\" #>  #> $legend.position #> [1] \"bottom\" #>  #> attr(,\"class\") #> [1] \"metanetwork_config\""},{"path":"https://marcohlmann.github.io/metanetwork/reference/is.metanetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"Test of belonging to class metanetwork — is.metanetwork","title":"Test of belonging to class metanetwork — is.metanetwork","text":"Return boolean indicating whether object belongs class metanetwork","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/is.metanetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test of belonging to class metanetwork — is.metanetwork","text":"","code":"is.metanetwork(metanetwork)  # S3 method for metanetwork is.metanetwork(metanetwork)"},{"path":"https://marcohlmann.github.io/metanetwork/reference/is.metanetwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test of belonging to class metanetwork — is.metanetwork","text":"metanetwork object test","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/is.metanetwork.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test of belonging to class metanetwork — is.metanetwork","text":"boolean indicating wheter object belongs class metanetworkNULL","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/is.metanetwork.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test of belonging to class metanetwork — is.metanetwork","text":"","code":"library(metanetwork) library(igraph)   g = make_ring(5,directed = TRUE) meta = build_metanet(g) #> Warning: nodes of metaweb do not have names. Assigning integers as names is.metanetwork(meta) #> [1] TRUE #on Angola dataset is.metanetwork(meta_angola) #> [1] TRUE"},{"path":"https://marcohlmann.github.io/metanetwork/reference/meta_angola.html","id":null,"dir":"Reference","previous_headings":"","what":"Angola fishery metanetwork\nmetanetwork built from:\nKAngelini & Velho 2011, Data from: \nAngelini, R., Velho, VF. (2011)\n Ecosystem structure and trophic analysis of Angolan fishery landings. Scientia Marina 75(2) — meta_angola","title":"Angola fishery metanetwork\nmetanetwork built from:\nKAngelini & Velho 2011, Data from: \nAngelini, R., Velho, VF. (2011)\n Ecosystem structure and trophic analysis of Angolan fishery landings. Scientia Marina 75(2) — meta_angola","text":"Angola fishery metanetwork metanetwork built : KAngelini & Velho 2011, Data :  Angelini, R., Velho, VF. (2011)  Ecosystem structure trophic analysis Angolan fishery landings. Scientia Marina 75(2)","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/meta_angola.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Angola fishery metanetwork\nmetanetwork built from:\nKAngelini & Velho 2011, Data from: \nAngelini, R., Velho, VF. (2011)\n Ecosystem structure and trophic analysis of Angolan fishery landings. Scientia Marina 75(2) — meta_angola","text":"","code":"meta_angola"},{"path":"https://marcohlmann.github.io/metanetwork/reference/meta_angola.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Angola fishery metanetwork\nmetanetwork built from:\nKAngelini & Velho 2011, Data from: \nAngelini, R., Velho, VF. (2011)\n Ecosystem structure and trophic analysis of Angolan fishery landings. Scientia Marina 75(2) — meta_angola","text":"metaweb metaweb Angelini & Velho 2011, containing 28 groups 127 interactions, igraph object abTable Abundance table built biomass two dates: 1986 2003, matrix trophicTable Taxonomic table, three column data.frame  three different taxonomic levels (species (group), phylum kingdom)","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/meta_angola.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Angola fishery metanetwork\nmetanetwork built from:\nKAngelini & Velho 2011, Data from: \nAngelini, R., Velho, VF. (2011)\n Ecosystem structure and trophic analysis of Angolan fishery landings. Scientia Marina 75(2) — meta_angola","text":"https://scientiamarina.revistas.csic.es/index.php/scientiamarina/article/view/1254","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/metanet_build_pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Build and execute 'metanetwork' pipeline — metanet_build_pipe","title":"Build and execute 'metanetwork' pipeline — metanet_build_pipe","text":"Method executing whole metanetwork pipeline, including building 'metanetwork' object (build_metanet,append_agg_nets, compute_TL,  attach_layout)","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/metanet_build_pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build and execute 'metanetwork' pipeline — metanet_build_pipe","text":"","code":"metanet_build_pipe(metanetwork, beta = 0.1, verbose = T)  # S3 method for metanetwork metanet_build_pipe(metanetwork, beta = 0.1, verbose = T)"},{"path":"https://marcohlmann.github.io/metanetwork/reference/metanet_build_pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build and execute 'metanetwork' pipeline — metanet_build_pipe","text":"metanetwork object class 'metanetwork' beta diffusion parameter diffusion kernel, positive scalar controlling  squeezing network verbose boolean indicating wheter message along pipeline printed","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/metanet_build_pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build and execute 'metanetwork' pipeline — metanet_build_pipe","text":"object class 'metanetwork' NULL","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/metanet_build_pipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build and execute 'metanetwork' pipeline — metanet_build_pipe","text":"","code":"library(metanetwork) library(igraph)  g = make_lattice(dimvector = c(4,4),2,3,directed = TRUE) meta0 = build_metanet(g) #> Warning: nodes of metaweb do not have names. Assigning integers as names meta0 = metanet_pipe(meta0) #> computing trophic levels #> attaching layout for beta= 0.1 #> beta = 0.1 #> Epoch: Iteration #100 error is: 431.402455891912 #> Epoch: Iteration #200 error is: 101.980051218011 #> Epoch: Iteration #300 error is: 101.980051216652 ggmetanet(meta0) #> mode is TL-tsne #> Warning: node.size is invariant; size.cut ignored   #on angola data set meta_angola = metanet_pipe(meta_angola,beta = 0.05) #> append aggregated networks #> computing trophic levels #> attaching layout for beta= 0.05 #> beta = 0.05 #> Epoch: Iteration #100 error is: 907.410775019406 #> Epoch: Iteration #200 error is: 217.133403165825 #> Epoch: Iteration #300 error is: 217.252553479635"},{"path":"https://marcohlmann.github.io/metanetwork/reference/metanet_pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute 'metanetwork' pipeline — metanet_pipe","title":"Execute 'metanetwork' pipeline — metanet_pipe","text":"Method executing whole metanetwork pipeline initial metanetwork object (append_agg_nets, compute_TL,  attach_layout)","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/metanet_pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute 'metanetwork' pipeline — metanet_pipe","text":"","code":"metanet_pipe(metanetwork, beta = 0.1, verbose = T)  # S3 method for metanetwork metanet_pipe(metanetwork, beta = 0.1, verbose = T)"},{"path":"https://marcohlmann.github.io/metanetwork/reference/metanet_pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute 'metanetwork' pipeline — metanet_pipe","text":"metanetwork object class 'metanetwork' beta diffusion parameter diffusion kernel, positive scalar controlling  squeezing network verbose boolean indicating wheter message along pipeline printed","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/metanet_pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute 'metanetwork' pipeline — metanet_pipe","text":"object class 'metanetwork' NULL","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/metanet_pipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute 'metanetwork' pipeline — metanet_pipe","text":"","code":"library(metanetwork) library(igraph)  g = make_lattice(dimvector = c(4,4),2,3,directed = TRUE) meta0 = build_metanet(g) #> Warning: nodes of metaweb do not have names. Assigning integers as names meta0 = metanet_pipe(meta0) #> computing trophic levels #> attaching layout for beta= 0.1 #> beta = 0.1 #> Epoch: Iteration #100 error is: 431.402455891913 #> Epoch: Iteration #200 error is: 101.980051214017 #> Epoch: Iteration #300 error is: 101.980051216652 ggmetanet(meta0) #> mode is TL-tsne #> Warning: node.size is invariant; size.cut ignored   #on angola data set meta_angola = metanet_pipe(meta_angola) #> append aggregated networks #> computing trophic levels #> attaching layout for beta= 0.1 #> beta = 0.1 #> Epoch: Iteration #100 error is: 838.972872529304 #> Epoch: Iteration #200 error is: 199.589212343115 #> Epoch: Iteration #300 error is: 199.589190200869"},{"path":"https://marcohlmann.github.io/metanetwork/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe — %>%","title":"Pipe — %>%","text":"Like dplyr, metanetwork also uses pipe function, %>% turn function composition series imperative statements.","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/pipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipe — %>%","text":"","code":"library(metanetwork) meta_angola %>% attach_layout() %>% ggmetanet() #> beta = 0.1 #> Epoch: Iteration #100 error is: 838.991991437908 #> Epoch: Iteration #200 error is: 199.589206729186 #> Epoch: Iteration #300 error is: 199.589190200877 #> mode is TL-tsne"},{"path":"https://marcohlmann.github.io/metanetwork/reference/plot_trophicTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot trophic groups hierarchy — plot_trophicTable","title":"Plot trophic groups hierarchy — plot_trophicTable","text":"Function represent trophic groups hierachy provided trophicTable","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/plot_trophicTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot trophic groups hierarchy — plot_trophicTable","text":"","code":"plot_trophicTable(metanetwork, res = \"all\", ggnet.config = ggnet.default)"},{"path":"https://marcohlmann.github.io/metanetwork/reference/plot_trophicTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot trophic groups hierarchy — plot_trophicTable","text":"metanetwork object class 'metanetwork' res resolutions included hierachy representation. Default \"\" (resolutions included) can also vector given resolutions ggnet.config configuration list ggnet representation, default ggnet.default","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/plot_trophicTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot trophic groups hierarchy — plot_trophicTable","text":"object class 'ggnet'","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/plot_trophicTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot trophic groups hierarchy — plot_trophicTable","text":"","code":"library(metanetwork)  #on Angola data_set plot_trophicTable(meta_angola)"},{"path":"https://marcohlmann.github.io/metanetwork/reference/print_metanet.html","id":null,"dir":"Reference","previous_headings":"","what":"print metanetwork — print_metanet","title":"print metanetwork — print_metanet","text":"Print method class metanetwork","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/print_metanet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print metanetwork — print_metanet","text":"","code":"print_metanet(metanetwork)  # S3 method for metanetwork print_metanet(metanetwork)"},{"path":"https://marcohlmann.github.io/metanetwork/reference/print_metanet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print metanetwork — print_metanet","text":"metanetwork object class 'metanetwork'","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/print_metanet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"print metanetwork — print_metanet","text":"character indicating number nodes edges metaweb, availabe resolutions  number local networks NULL","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/print_metanet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"print metanetwork — print_metanet","text":"","code":"library(metanetwork) library(igraph)  g = make_ring(5,directed = TRUE) meta = build_metanet(g) #> Warning: nodes of metaweb do not have names. Assigning integers as names print_metanet(meta) #> object of class metanetwork #> metaweb has 5 nodes and 5 edges  #> single network  #> single resolution available   #on Angola dataset print_metanet(meta_angola) #> object of class metanetwork #> metaweb has 28 nodes and 127 edges  #> 2 local networks  #> available resolutions are: Species Phylum"},{"path":"https://marcohlmann.github.io/metanetwork/reference/visNetwork.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default configuration for visNetwork — visNetwork.default","title":"Default configuration for visNetwork — visNetwork.default","text":"list parameters customizing visNetwork visualisation (see visNetwork documentations)","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/visNetwork.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default configuration for visNetwork — visNetwork.default","text":"","code":"visNetwork.default"},{"path":"https://marcohlmann.github.io/metanetwork/reference/visNetwork.default.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Default configuration for visNetwork — visNetwork.default","text":"object class metanetwork_config length 4.","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/visNetwork.default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default configuration for visNetwork — visNetwork.default","text":"","code":"# display all default settings visNetwork.default #> $label #> [1] TRUE #>  #> $label.size #> [1] 10 #>  #> $visEvent #> [1] TRUE #>  #> $edge.size #> [1] 1 #>  #> attr(,\"class\") #> [1] \"metanetwork_config\"  # create a new settings visNetwork.custom = visNetwork.default visNetwork.custom$label.size = 10 visNetwork.custom #> $label #> [1] TRUE #>  #> $label.size #> [1] 10 #>  #> $visEvent #> [1] TRUE #>  #> $edge.size #> [1] 1 #>  #> attr(,\"class\") #> [1] \"metanetwork_config\""},{"path":"https://marcohlmann.github.io/metanetwork/reference/vismetaNetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"vismetaNetwork — vismetaNetwork","title":"vismetaNetwork — vismetaNetwork","text":"Function provides network dynamic representation  (using 'visNetwork')  'metanetwork' object layout based diffusion kernel","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/vismetaNetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vismetaNetwork — vismetaNetwork","text":"","code":"vismetaNetwork(   metanetwork,   g = NULL,   beta = 0.1,   legend = NULL,   mode = \"TL-tsne\",   edge_thrs = NULL,   layout_metaweb = F,   nrep_ly = 1,   flip_coords = F,   diff_plot_bool = F,   x_y_range = c(100, 100),   visNetwork.config = visNetwork.default,   TL_tsne.config = TL_tsne.default )"},{"path":"https://marcohlmann.github.io/metanetwork/reference/vismetaNetwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vismetaNetwork — vismetaNetwork","text":"metanetwork object class metanetwork g network (igraph object) represent, default metaweb beta diffusion parameter diffusion kernel, positive scalar controlling  vertical squeezing network legend resolution legend, legend resolution must coarser resolution resolution g, default NULL mode mode used layout, 'TL-tsne' trophic level t-sne 'TL-kpco' trophic level kernel based pco. Default 'TL-tsne' edge_thrs non-null, numeric (0 1) indicating edge threshold representation layout_metaweb boolean indicating whether layout metaweb used represent network use metaweb layout = T, need first compute metaweb layout beta value using attach_layout() nrep_ly several layouts beta value attached metaweb (layout_metaweb = T), index layout use, see attach_layout() flip_coords boolean indicating wheter coordinates flipped.  case, y-axis trophic level x-axis layout axis diff_plot_bool boolean, edit hand x_y_range two dimension numeric vector, indicating dilatation x,y axis visNetwork.config configuration list visNetwork representation, default visNetwork.default TL_tsne.config configuration list mode 'TL-tsne', default TL_tsne.default","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/vismetaNetwork.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vismetaNetwork — vismetaNetwork","text":"object class 'visNetwork'","code":""},{"path":"https://marcohlmann.github.io/metanetwork/reference/vismetaNetwork.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vismetaNetwork — vismetaNetwork","text":"","code":"library(metanetwork) library(igraph)  #on angola dataset meta_angola = attach_layout(meta_angola, beta = 0.05) #> beta = 0.05 #> Epoch: Iteration #100 error is: 907.410775018685 #> Epoch: Iteration #200 error is: 217.11258370816 #> Epoch: Iteration #300 error is: 217.223713186613 vismetaNetwork(meta_angola, beta = 0.05) #> x_max = 1259.92651522773 #> y_max = 362.934217319456 #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator # flipping coordinates and controlling x_y_range vismetaNetwork(meta_angola, beta = 0.05,flip_coords = TRUE,x_y_range = c(50,200)) #> x_max = 1451.73686927782 #> y_max = 314.981628806931 #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator #adding a legend vismetaNetwork(meta_angola,legend = \"Phylum\", beta = 0.05) #> x_max = 1259.92651522773 #> y_max = 362.934217319456 #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator #use metaweb layout to represent a local network vismetaNetwork(metanetwork = meta_angola,g = meta_angola$X2003,legend = \"Phylum\", beta = 0.05, layout_metaweb=TRUE) #> x_max = 1259.92651522773 #> y_max = 362.934217319456 #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  #custom visNetwork parameters visNetwork.custom = visNetwork.default visNetwork.custom$edge.size = 5 visNetwork.custom$label = FALSE  vismetaNetwork(meta_angola,legend = \"Phylum\", beta = 0.05, visNetwork.config = visNetwork.custom) #> x_max = 1259.92651522773 #> y_max = 362.934217319456 #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"}]
