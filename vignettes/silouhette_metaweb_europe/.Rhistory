#assigning shapes (four types 15,16,17,18) and colors
groups_loc = unique(color_loc)
n_groups_loc = length(groups_loc)
#shapes: use of 15,16,17,18 and 25
k = floor(n_groups_loc/5)
shapes_loc = c(rep(15,k),rep(16,k),rep(17,k),
rep(18,k),rep(25,n_groups_loc-4*k))
names(shapes_loc) = groups_loc
shapes_loc_nodes = sapply(metanetwork$trophicTable[V(g)$name,legend],
function(x) shapes_loc[x])
names(shapes_loc_nodes) = V(g)$name
#colors
mycolors = grDevices::colorRampPalette(RColorBrewer::brewer.pal(8, ggnet.config$palette))(floor(nb_cols/5)+4)
colors_loc = c(mycolors[1:k],mycolors[1:k],mycolors[1:k],mycolors[1:k],mycolors[1:(n_groups_loc-4*k)])
names(colors_loc) = groups_loc
colors_loc_nodes = sapply(metanetwork$trophicTable[V(g)$name,legend],
function(x) colors_loc[x])
names(colors_loc_nodes) = V(g)$name
# shape_color_table = data.frame(shape = shapes_loc,color = shapes_loc)
# rownames(shape_color_table) = groups_loc
net = GGally::ggnet2(g_Network,mode = mode_loc,
color = colors_loc_nodes,
size = as.numeric(igraph::V(g)$ab/max(igraph::V(g)$ab)),
label = ggnet.config$label,
label.size = ggnet.config$label.size,
max_size = ggnet.config$max_size,size.cut = ggnet.config$size.cut,
edge.size = "weight",arrow.size = ggnet.config$arrow.size,
arrow.gap = ggnet.config$arrow.gap,
alpha = alpha,
edge.alpha = edge_alpha_vec,
legend.position = ggnet.config$legend.position,
shape = shapes_loc_nodes)
return(net)
}
}else{
nodes_focal = alpha_per_node$nodes
alpha_focal = alpha_per_node$alpha_focal
alpha_hidden = alpha_per_node$alpha_hidden
alpha = ifelse(V(g)$name %in% nodes_focal,
as.numeric(alpha_focal),as.numeric(alpha_hidden))
edge_alpha = (alpha %*% t(alpha)) * igraph::get.adjacency(g) * ggnet.custom$edge.alpha
g_Network = network::set.edge.value(g_Network,"edge_alpha",edge_alpha)
edge_alpha_vec = network::get.edge.attribute(g_Network,'edge_alpha')
nb_cols = length(unique(color_loc))
#use colors only if reasonible number of colors
if(nb_cols < 15){
mycolors = grDevices::colorRampPalette(RColorBrewer::brewer.pal(8, ggnet.config$palette))(nb_cols)
names(mycolors) = unique(color_loc)
net = GGally::ggnet2(g_Network,mode = mode_loc,color = color_loc,
size = size_loc,
label = ggnet.config$label,
label.size = ggnet.config$label.size,
max_size = ggnet.config$max_size,size.cut = ggnet.config$size.cut,
edge.size = "weight",arrow.size = ggnet.config$arrow.size,
arrow.gap = ggnet.config$arrow.gap,
alpha = alpha,
edge.alpha = edge_alpha_vec,
palette = mycolors,
legend.position = ggnet.config$legend.position) +
ggplot2::theme(legend.box = "vertical")
return(net)
} else{ #use colors and shapes
#assigning shapes (four types 15,16,17,18) and colors
groups_loc = unique(color_loc)
n_groups_loc = length(groups_loc)
#shapes: use of 15,16,17,18 and 25
k = floor(n_groups_loc/5)
shapes_loc = c(rep(15,k),rep(16,k),rep(17,k),
rep(18,k),rep(25,n_groups_loc-4*k))
names(shapes_loc) = groups_loc
shapes_loc_nodes = sapply(metanetwork$trophicTable[V(g)$name,legend],
function(x) shapes_loc[x])
names(shapes_loc_nodes) = V(g)$name
#colors
mycolors = grDevices::colorRampPalette(RColorBrewer::brewer.pal(8, ggnet.config$palette))(floor(nb_cols/5)+4)
colors_loc = c(mycolors[1:k],mycolors[1:k],mycolors[1:k],mycolors[1:k],mycolors[1:(n_groups_loc-4*k)])
names(colors_loc) = groups_loc
colors_loc_nodes = sapply(metanetwork$trophicTable[V(g)$name,legend],
function(x) colors_loc[x])
names(colors_loc_nodes) = V(g)$name
net = GGally::ggnet2(g_Network,mode = mode_loc,
color = colors_loc_nodes,
size = size_loc,
label = ggnet.config$label,
label.size = ggnet.config$label.size,
max_size = ggnet.config$max_size,size.cut = ggnet.config$size.cut,
edge.size = "weight",arrow.size = ggnet.config$arrow.size,
arrow.gap = ggnet.config$arrow.gap,
alpha = alpha,
edge.alpha = edge_alpha_vec,
legend.position = ggnet.config$legend.position,
shape = shapes_loc_nodes)  +
ggplot2::theme(legend.box = "vertical")
# shape_color_table = data.frame(shape = shapes_loc,color = shapes_loc)
# rownames(shape_color_table) = groups_loc
return(net)
}
}
}else{
if(!(alpha_interactive)){
#assigning max_size if single abundance value
size_loc = as.numeric(igraph::V(g)$ab/max(igraph::V(g)$ab))
if(length(unique(size_loc)) == 1){
size_loc = ggnet.config$max_size
}
if(!(is.null(legend))){
nb_cols = length(unique(color_loc))
#use colors only if reasonible number of colors
if(nb_cols < 15){
mycolors = grDevices::colorRampPalette(RColorBrewer::brewer.pal(8, ggnet.config$palette))(nb_cols)
names(mycolors) = unique(color_loc)
net = GGally::ggnet2(g_Network,mode = mode_loc,
color = color_loc,
size = size_loc,
label = ggnet.config$label,
label.size = ggnet.config$label.size,
max_size = ggnet.config$max_size,size.cut = ggnet.config$size.cut,
edge.size = "weight",arrow.size = ggnet.config$arrow.size,
arrow.gap = ggnet.config$arrow.gap,
alpha = ggnet.config$alpha,
edge.alpha = ggnet.config$edge.alpha,
legend.position = ggnet.config$legend.position,
palette = mycolors)  +
ggplot2::theme(legend.box = "vertical")
return(net)
} else{ #use colors and shapes
#assigning shapes (four types 15,16,17,18) and colors
groups_loc = unique(color_loc)
n_groups_loc = length(groups_loc)
#shapes: use of 15,16,17,18 and 25
k = floor(n_groups_loc/5)
shapes_loc = c(rep(15,k),rep(16,k),rep(17,k),
rep(18,k),rep(25,n_groups_loc-4*k))
names(shapes_loc) = groups_loc
shapes_loc_nodes = sapply(metanetwork$trophicTable[V(g)$name,legend],
function(x) shapes_loc[x])
names(shapes_loc_nodes) = V(g)$name
#colors
mycolors = grDevices::colorRampPalette(RColorBrewer::brewer.pal(8, ggnet.config$palette))(floor(nb_cols/5)+4)
colors_loc = c(mycolors[1:k],mycolors[1:k],mycolors[1:k],mycolors[1:k],mycolors[1:(n_groups_loc-4*k)])
names(colors_loc) = groups_loc
colors_loc_nodes = sapply(metanetwork$trophicTable[V(g)$name,legend],
function(x) colors_loc[x])
names(colors_loc_nodes) = V(g)$name
# shape_color_table = data.frame(shape = shapes_loc,color = shapes_loc)
# rownames(shape_color_table) = groups_loc
net = GGally::ggnet2(g_Network,mode = mode_loc,
color = colors_loc_nodes,
size = size_loc,
label = ggnet.config$label,
label.size = ggnet.config$label.size,
max_size = ggnet.config$max_size,size.cut = ggnet.config$size.cut,
edge.size = "weight",arrow.size = ggnet.config$arrow.size,
arrow.gap = ggnet.config$arrow.gap,
alpha = ggnet.config$alpha,
edge.alpha = ggnet.config$edge.alpha,
legend.position = ggnet.config$legend.position,
shape = shapes_loc_nodes)  +
ggplot2::theme(legend.box = "vertical")
return(net)
}
} else {
net = GGally::ggnet2(g_Network,mode = mode_loc,node.color = ggnet.config$default.color,
size = size_loc,
label = ggnet.config$label, label.size = ggnet.config$label.size,
max_size = ggnet.config$max_size,size.cut = ggnet.config$size.cut,
edge.size = "weight",arrow.size = ggnet.config$arrow.size,
arrow.gap = ggnet.config$arrow.gap, alpha = ggnet.config$alpha,
edge.alpha = ggnet.config$edge.alpha,
legend.position = ggnet.config$legend.position)  +
ggplot2::theme(legend.box = "vertical")
return(net)
}
} else {
if(is.null(legend)){
message("Alpha interactive mode, enter nodes to enhance")
message(paste0("Choose nodes among: "),Reduce(paste,V(g)$name))
nodes_loc = readline(prompt = "nodes (format: name1,name2,...): ")
nodes_focal = strsplit(nodes_loc,',')[[1]]
alpha_focal = readline(prompt = "node alpha of focal nodes: ")
alpha_hidden = readline(prompt = "node alpha of hidden nodes: ")
alpha = ifelse(V(g)$name %in% nodes_focal,
as.numeric(alpha_focal),as.numeric(alpha_hidden))
edge_alpha = (alpha %*% t(alpha)) * igraph::get.adjacency(g) * ggnet.config$edge.alpha
g_Network = network::set.edge.value(g_Network,"edge_alpha",edge_alpha)
edge_alpha_vec = network::get.edge.attribute(g_Network,'edge_alpha')
#formatting nodes_focal (string) for message
names_loc = sapply(nodes_focal,function(x) paste0("'",x,"'"))
names_to_print = gsub(" ",",",Reduce(x = as.character(names_loc),f = paste))
message(paste0('you can reproduce this result in non-interactive mode by setting: \n',
'alpha_per_node = ','list(nodes = c(',names_to_print,'),alpha_focal =',alpha_focal,
',alpha_hidden =',alpha_hidden,')'))
net = GGally::ggnet2(g_Network,mode = mode_loc,
size = as.numeric(igraph::V(g)$ab/max(igraph::V(g)$ab)),
label = ggnet.config$label,
label.size = ggnet.config$label.size*alpha,
max_size = ggnet.config$max_size,size.cut = ggnet.config$size.cut,
edge.size = "weight",arrow.size = ggnet.config$arrow.size,
arrow.gap = ggnet.config$arrow.gap,
alpha = alpha,
edge.alpha = edge_alpha_vec,
legend.position = ggnet.config$legend.position)  +
ggplot2::theme(legend.box = "vertical")
return(net)
} else{
message("Alpha interactive mode, enter groups to enhance")
message(paste0("Choose groups among: "),Reduce(paste,unique(metanetwork$trophicTable[,legend])))
groups_loc = readline(prompt="groups (format: group1,group2,...): ")
groups_focal = strsplit(groups_loc,',')[[1]]
alpha_focal = readline(prompt="node alpha of focal groups: ")
alpha_hidden = readline(prompt="node alpha of hidden groups: ")
# edge_alpha_focal = readline(prompt="edge alpha of focal groups: ")
# edge_alpha_hidden = readline(prompt="edge alpha of hidden groups: ")
alpha = ifelse(metanetwork$trophicTable[rownames(mode_loc),legend] %in% groups_focal,
as.numeric(alpha_focal),as.numeric(alpha_hidden))
edge_alpha = (alpha %*% t(alpha)) * igraph::get.adjacency(g) * ggnet.config$edge.alpha
g_Network = network::set.edge.value(g_Network,"edge_alpha",edge_alpha)
edge_alpha_vec = network::get.edge.attribute(g_Network,'edge_alpha')
#formatting groups_focal (string) for message
names_loc = sapply(groups_focal,function(x) paste0("'",x,"'"))
names_to_print = gsub(" ",",",Reduce(x = as.character(names_loc),f = paste))
message(paste0('you can reproduce this result in non-interactive mode by setting: \n',
'alpha_per_group = ','list(groups = c(',names_to_print,'),alpha_focal =',alpha_focal,
',alpha_hidden =',alpha_hidden,')'))
nb_cols = length(unique(color_loc))
mycolors = grDevices::colorRampPalette(RColorBrewer::brewer.pal(8, ggnet.config$palette))(nb_cols)
names(mycolors) = unique(color_loc)
net = GGally::ggnet2(g_Network,mode = mode_loc,color = color_loc,
size = as.numeric(igraph::V(g)$ab/max(igraph::V(g)$ab)),
label = ggnet.config$label,
label.size = ggnet.config$label.size,
max_size = ggnet.config$max_size,size.cut = ggnet.config$size.cut,
edge.size = "weight",arrow.size = ggnet.config$arrow.size,
arrow.gap = ggnet.config$arrow.gap,
alpha = alpha,
edge.alpha = edge_alpha_vec,
palette = mycolors,
legend.position = ggnet.config$legend.position)  +
ggplot2::theme(legend.box = "vertical")
return(net)
}
}
}
}
!(is.null(alpha_per_group) && is.null(alpha_per_node))
!(alpha_interactive)
#assigning max_size if single abundance value
size_loc = as.numeric(igraph::V(g)$ab/max(igraph::V(g)$ab))
if(length(unique(size_loc)) == 1){
size_loc = ggnet.config$max_size
}
!(is.null(legend))
nb_cols = length(unique(color_loc))
#use colors only if reasonible number of colors
if(nb_cols < 15){
mycolors = grDevices::colorRampPalette(RColorBrewer::brewer.pal(8, ggnet.config$palette))(nb_cols)
names(mycolors) = unique(color_loc)
net = GGally::ggnet2(g_Network,mode = mode_loc,
color = color_loc,
size = size_loc,
label = ggnet.config$label,
label.size = ggnet.config$label.size,
max_size = ggnet.config$max_size,size.cut = ggnet.config$size.cut,
edge.size = "weight",arrow.size = ggnet.config$arrow.size,
arrow.gap = ggnet.config$arrow.gap,
alpha = ggnet.config$alpha,
edge.alpha = ggnet.config$edge.alpha,
legend.position = ggnet.config$legend.position,
palette = mycolors)  +
ggplot2::theme(legend.box = "vertical")
return(net)
} else{ #use colors and shapes
#assigning shapes (four types 15,16,17,18) and colors
groups_loc = unique(color_loc)
n_groups_loc = length(groups_loc)
#shapes: use of 15,16,17,18 and 25
k = floor(n_groups_loc/5)
shapes_loc = c(rep(15,k),rep(16,k),rep(17,k),
rep(18,k),rep(25,n_groups_loc-4*k))
names(shapes_loc) = groups_loc
shapes_loc_nodes = sapply(metanetwork$trophicTable[V(g)$name,legend],
function(x) shapes_loc[x])
names(shapes_loc_nodes) = V(g)$name
#colors
mycolors = grDevices::colorRampPalette(RColorBrewer::brewer.pal(8, ggnet.config$palette))(floor(nb_cols/5)+4)
colors_loc = c(mycolors[1:k],mycolors[1:k],mycolors[1:k],mycolors[1:k],mycolors[1:(n_groups_loc-4*k)])
names(colors_loc) = groups_loc
colors_loc_nodes = sapply(metanetwork$trophicTable[V(g)$name,legend],
function(x) colors_loc[x])
names(colors_loc_nodes) = V(g)$name
# shape_color_table = data.frame(shape = shapes_loc,color = shapes_loc)
# rownames(shape_color_table) = groups_loc
net = GGally::ggnet2(g_Network,mode = mode_loc,
color = colors_loc_nodes,
size = size_loc,
label = ggnet.config$label,
label.size = ggnet.config$label.size,
max_size = ggnet.config$max_size,size.cut = ggnet.config$size.cut,
edge.size = "weight",arrow.size = ggnet.config$arrow.size,
arrow.gap = ggnet.config$arrow.gap,
alpha = ggnet.config$alpha,
edge.alpha = ggnet.config$edge.alpha,
legend.position = ggnet.config$legend.position,
shape = shapes_loc_nodes)  +
ggplot2::theme(legend.box = "vertical")
return(net)
}
net
color_loc
mycolors
color_loc
color_loc = trophic_table_loc[igraph::V(g)$name,legend]
order(color_loc)
color_loc = trophic_table_loc[igraph::V(g)$name,legend]
g = igraph::permute(g,order(color_loc))
#ordering colors for legend
color_loc = color_loc[order(color_loc)]
!(is.null(alpha_per_group) && is.null(alpha_per_node))
!(alpha_interactive)
#assigning max_size if single abundance value
size_loc = as.numeric(igraph::V(g)$ab/max(igraph::V(g)$ab))
if(length(unique(size_loc)) == 1){
size_loc = ggnet.config$max_size
}
nb_cols = length(unique(color_loc))
mycolors = grDevices::colorRampPalette(RColorBrewer::brewer.pal(8, ggnet.config$palette))(nb_cols)
names(mycolors) = unique(color_loc)
net = GGally::ggnet2(g_Network,mode = mode_loc,
color = color_loc,
size = size_loc,
label = ggnet.config$label,
label.size = ggnet.config$label.size,
max_size = ggnet.config$max_size,size.cut = ggnet.config$size.cut,
edge.size = "weight",arrow.size = ggnet.config$arrow.size,
arrow.gap = ggnet.config$arrow.gap,
alpha = ggnet.config$alpha,
edge.alpha = ggnet.config$edge.alpha,
legend.position = ggnet.config$legend.position,
palette = mycolors)  +
ggplot2::theme(legend.box = "vertical")
net
color_loc = trophic_table_loc[igraph::V(g)$name,legend]
color_loc
V(g)$name
g = igraph::permute(g,order(color_loc))
V(g)$name
g = metanetwork$metaweb
igraph::V(g)$name
color_loc = trophic_table_loc[igraph::V(g)$name,legend]
color_loc
#ordering colors for legend
color_loc = color_loc[order(color_loc)]
color_loc
ph::permute(g,order(color_loc))
#ordering colors for legend
color_loc
g = igraph::permute(g,order(color_loc))
V(g)$name
g = igraph::permute(g,order(color_loc))
V(g)$name
g = igraph::permute(g,order(order(color_loc)))
V(g)$name
color_loc
order(order(color_loc))
order(color_loc)
color_loc
g = metanetwork$metaweb
V(g)$name
# if(!(is.null(groups))){
#get the largest connected components only
# g = igraph::induced_subgraph(g,
#                              which(metanetwork$trophicTable[igraph::V(g)$name,legend] %in% groups))
# components_loc = igraph::components(g,mode='weak')
# g = igraph::induced_subgraph(g,names(which(components_loc$membership == 1)))
# trophic_table_loc = unique(metanetwork$trophicTable[,c(res_local,legend)])
# rownames(trophic_table_loc) = trophic_table_loc[,1]
# color_loc = trophic_table_loc[igraph::V(g)$name,legend]
# } else {
trophic_table_loc = unique(metanetwork$trophicTable[,c(res_local,legend)])
rownames(trophic_table_loc) = trophic_table_loc[,1]
color_loc = trophic_table_loc[igraph::V(g)$name,legend]
color_loc
V(g)$name
order(color_loc)
igraph::permute(g,order(color_loc))
V(igraph::permute(g,order(color_loc)))$name
color_loc[order(color_loc)]
order(color_loc)
V(g)$name
order_loc = order(color_loc)
order_loc
color_loc[order_loc]
V(g)$name[order_loc]
order_loc = order(color_loc)
V(igraph::permute(g,order_loc))$name
V(g)$name
V(igraph::permute(g,order[order_loc]))$name
order_loc
V(igraph::permute(g,order(order_loc))$name
#ordering colors for legend
color_loc = color_loc[order(color_loc)]
# }
}
}
}else{
#metaweb of the two networks
g = metanetwork$metaweb
#simplify the network (remove self loops)
if(!(igraph::is.simple(g))){
g = igraph::simplify(g,edge.attr.comb = "concat")
}
#edge weight threshold
if(!(is.null(edge_thrs))){
g = igraph::delete.edges(graph = g,
edges =  which(abs(igraph::E(g)$weight_col) < edge_thrs))
}
color_loc =  ifelse(igraph::V(g)$ab>0,'more ab in g1','more ab in g2')
color_loc[which(igraph::V(g)$ab > 2)] = 'only pres in g1'
color_loc[which(igraph::V(g)$ab < -2)] = 'only pres in g2'
color_loc[which(igraph::V(g)$ab ==0)] = 'shared'
edge_color_loc = ifelse(igraph::E(g)$weight_col>0,'#a1d99b','#fc9272')
edge_color_loc[which(igraph::E(g)$weight_col == 0)] = 'black'
edge_color_loc[which(igraph::E(g)$weight_col > 2)] = '#31a354'
edge_color_loc[which(igraph::E(g)$weight_col < -2)] = '#de2d26'
if(length(igraph::E(g)$weight_col[which(igraph::E(g)$weight_col == 0)])>0){
igraph::E(g)$weight_col[which(igraph::E(g)$weight_col == 0)] =
igraph::E(g)$weight_col_bis[which(igraph::E(g)$weight_col == 0)]
}
if(length(igraph::E(g)$weight_col[which(igraph::E(g)$weight_col < 2)])>0){
igraph::E(g)$weight_col[which(igraph::E(g)$weight_col < 2)] =
igraph::E(g)$weight_col_bis[which(igraph::E(g)$weight_col < 2)]
}
if(length(igraph::E(g)$weight_col[which(igraph::E(g)$weight_col > 2)])>0){
igraph::E(g)$weight_col[which(igraph::E(g)$weight_col > 2)] =
igraph::E(g)$weight_col_bis[which(igraph::E(g)$weight_col > 2)]
}
igraph::E(g)$weight = abs(igraph::E(g)$weight_col)
igraph::V(g)$ab = abs(igraph::V(g)$ab)
}
# if(!(is.null(vertex_names))){
#   if(length(vertex_names) == length(V(g))){
#     network.vertex.names(g_Network) = vertex_names
#   }
#   if(!(vertex_names)){network.vertex.names(g_Network) = rep("",length(V(g)))}
# }
if(mode %in% c("fr","kk","circle")){
if(mode == "fr"){
mode_loc = "fruchtermanreingold"
} else if(mode == "kk"){
mode_loc = "kamadakawai"
} else{
mode_loc = mode
}
}
if(mode == "TL-kpco"){
if(is.null(igraph::V(g)$TL)){
if(!diff_plot_bool){
stop("you must compute trophic levels first, see compute_TL")
}
igraph::V(g)$TL = compute_TL_laplacian(g,metanetwork)
}
mode_loc =  get_nodes_position_TL_kpco(g = g,TL = igraph::V(g)$TL,beta = beta)
rownames(mode_loc) = igraph::V(g)$name
}
if(mode == 'TL-tsne'){
if(is.null(igraph::V(g)$TL)){
stop("you must compute trophic levels first, see compute_TL")
}
#layout_metaweb option: get metaweb layout at the current resolution
if(layout_metaweb){
if(!(diff_plot_bool)){
networks = extract_networks(metanetwork)
if(is.null(g$res)){
metaweb = networks[[which(sapply(networks,function(g) g$name) == "metaweb")]]
} else{
metaweb = networks[[intersect(which(sapply(networks,function(g) g$res) %in% g$res),
which(sapply(networks,function(g) g$name) == "metaweb"))]]
}
attr_names = igraph::vertex_attr_names(metaweb)
if(length(grep(paste0("beta",beta),attr_names)) == 0){
stop("to use 'metaweb_layout = T', you need to attach a layout to the metaweb
for the desired beta value and resolution, see attach_layout function")
}else{
mode_loc_metaweb = cbind(igraph::V(metaweb)$TL,
igraph::get.vertex.attribute(
metaweb,attr_names[grep(paste0("beta",beta),attr_names)[nrep_ly]]))
rownames(mode_loc_metaweb) = igraph::V(metaweb)$name
mode_loc = mode_loc_metaweb[V(g)$name,]
}
V(igraph::permute(g,order(order_loc)))$name
}}
)
V(igraph::permute(g,order(order_loc)))$name
# if(!(is.null(groups))){
#get the largest connected components only
# g = igraph::induced_subgraph(g,
#                              which(metanetwork$trophicTable[igraph::V(g)$name,legend] %in% groups))
# components_loc = igraph::components(g,mode='weak')
# g = igraph::induced_subgraph(g,names(which(components_loc$membership == 1)))
# trophic_table_loc = unique(metanetwork$trophicTable[,c(res_local,legend)])
# rownames(trophic_table_loc) = trophic_table_loc[,1]
# color_loc = trophic_table_loc[igraph::V(g)$name,legend]
# } else {
trophic_table_loc = unique(metanetwork$trophicTable[,c(res_local,legend)])
rownames(trophic_table_loc) = trophic_table_loc[,1]
color_loc = trophic_table_loc[igraph::V(g)$name,legend]
order_loc = order(color_loc)
#permuting in the order of colors for legend
g = igraph::permute(g,order(order_loc))$name
#ordering colors for legend
color_loc = color_loc[order(color_loc)]
source("~/Desktop/metanetwork_project/github/metanetwork/R/ggmetanet.R", echo=TRUE)
